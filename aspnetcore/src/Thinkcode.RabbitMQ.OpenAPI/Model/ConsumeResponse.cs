/* 
 * Rabbitmq Http API
 *
 * This is the OpenAPI specification of the RabbitMQ HTTP API. For more information, please refer to [HTTP API](https://cdn.rawgit.com/rabbitmq/rabbitmq-management/v3.7.14/priv/www/api/index.html) official documentation.
 *
 * OpenAPI spec version: 1.0
 * Contact: carlos@adaptive.me
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Thinkcode.RabbitMQ.OpenAPI.Client.OpenAPIDateConverter;

namespace Thinkcode.RabbitMQ.OpenAPI.Model
{
    /// <summary>
    /// ConsumeResponse
    /// </summary>
    [DataContract]
    public partial class ConsumeResponse :  IEquatable<ConsumeResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ConsumeResponse" /> class.
        /// </summary>
        /// <param name="exchange">exchange.</param>
        /// <param name="messageCount">messageCount.</param>
        /// <param name="payload">payload.</param>
        /// <param name="payloadBytes">payloadBytes.</param>
        /// <param name="payloadEncoding">payloadEncoding.</param>
        /// <param name="properties">properties.</param>
        /// <param name="redelivered">redelivered.</param>
        /// <param name="routingKey">routingKey.</param>
        public ConsumeResponse(string exchange = default(string), int messageCount = default(int), string payload = default(string), int payloadBytes = default(int), string payloadEncoding = default(string), Collection<MessageProperties> properties = default(Collection<MessageProperties>), bool redelivered = default(bool), string routingKey = default(string))
        {
            this.Exchange = exchange;
            this.MessageCount = messageCount;
            this.Payload = payload;
            this.PayloadBytes = payloadBytes;
            this.PayloadEncoding = payloadEncoding;
            this.Properties = properties;
            this.Redelivered = redelivered;
            this.RoutingKey = routingKey;
        }
        
        /// <summary>
        /// Gets or Sets Exchange
        /// </summary>
        [DataMember(Name="exchange", EmitDefaultValue=false)]
        public string Exchange { get; set; }

        /// <summary>
        /// Gets or Sets MessageCount
        /// </summary>
        [DataMember(Name="message_count", EmitDefaultValue=false)]
        public int MessageCount { get; set; }

        /// <summary>
        /// Gets or Sets Payload
        /// </summary>
        [DataMember(Name="payload", EmitDefaultValue=false)]
        public string Payload { get; set; }

        /// <summary>
        /// Gets or Sets PayloadBytes
        /// </summary>
        [DataMember(Name="payload_bytes", EmitDefaultValue=false)]
        public int PayloadBytes { get; set; }

        /// <summary>
        /// Gets or Sets PayloadEncoding
        /// </summary>
        [DataMember(Name="payload_encoding", EmitDefaultValue=false)]
        public string PayloadEncoding { get; set; }

        /// <summary>
        /// Gets or Sets Properties
        /// </summary>
        [DataMember(Name="properties", EmitDefaultValue=false)]
        public Collection<MessageProperties> Properties { get; set; }

        /// <summary>
        /// Gets or Sets Redelivered
        /// </summary>
        [DataMember(Name="redelivered", EmitDefaultValue=false)]
        public bool Redelivered { get; set; }

        /// <summary>
        /// Gets or Sets RoutingKey
        /// </summary>
        [DataMember(Name="routing_key", EmitDefaultValue=false)]
        public string RoutingKey { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ConsumeResponse {\n");
            sb.Append("  Exchange: ").Append(Exchange).Append("\n");
            sb.Append("  MessageCount: ").Append(MessageCount).Append("\n");
            sb.Append("  Payload: ").Append(Payload).Append("\n");
            sb.Append("  PayloadBytes: ").Append(PayloadBytes).Append("\n");
            sb.Append("  PayloadEncoding: ").Append(PayloadEncoding).Append("\n");
            sb.Append("  Properties: ").Append(Properties).Append("\n");
            sb.Append("  Redelivered: ").Append(Redelivered).Append("\n");
            sb.Append("  RoutingKey: ").Append(RoutingKey).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ConsumeResponse);
        }

        /// <summary>
        /// Returns true if ConsumeResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of ConsumeResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ConsumeResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Exchange == input.Exchange ||
                    (this.Exchange != null &&
                    this.Exchange.Equals(input.Exchange))
                ) && 
                (
                    this.MessageCount == input.MessageCount ||
                    (this.MessageCount != null &&
                    this.MessageCount.Equals(input.MessageCount))
                ) && 
                (
                    this.Payload == input.Payload ||
                    (this.Payload != null &&
                    this.Payload.Equals(input.Payload))
                ) && 
                (
                    this.PayloadBytes == input.PayloadBytes ||
                    (this.PayloadBytes != null &&
                    this.PayloadBytes.Equals(input.PayloadBytes))
                ) && 
                (
                    this.PayloadEncoding == input.PayloadEncoding ||
                    (this.PayloadEncoding != null &&
                    this.PayloadEncoding.Equals(input.PayloadEncoding))
                ) && 
                (
                    this.Properties == input.Properties ||
                    this.Properties != null &&
                    this.Properties.SequenceEqual(input.Properties)
                ) && 
                (
                    this.Redelivered == input.Redelivered ||
                    (this.Redelivered != null &&
                    this.Redelivered.Equals(input.Redelivered))
                ) && 
                (
                    this.RoutingKey == input.RoutingKey ||
                    (this.RoutingKey != null &&
                    this.RoutingKey.Equals(input.RoutingKey))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Exchange != null)
                    hashCode = hashCode * 59 + this.Exchange.GetHashCode();
                if (this.MessageCount != null)
                    hashCode = hashCode * 59 + this.MessageCount.GetHashCode();
                if (this.Payload != null)
                    hashCode = hashCode * 59 + this.Payload.GetHashCode();
                if (this.PayloadBytes != null)
                    hashCode = hashCode * 59 + this.PayloadBytes.GetHashCode();
                if (this.PayloadEncoding != null)
                    hashCode = hashCode * 59 + this.PayloadEncoding.GetHashCode();
                if (this.Properties != null)
                    hashCode = hashCode * 59 + this.Properties.GetHashCode();
                if (this.Redelivered != null)
                    hashCode = hashCode * 59 + this.Redelivered.GetHashCode();
                if (this.RoutingKey != null)
                    hashCode = hashCode * 59 + this.RoutingKey.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
