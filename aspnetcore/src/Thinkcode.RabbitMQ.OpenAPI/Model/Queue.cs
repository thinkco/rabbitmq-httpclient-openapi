/* 
 * Rabbitmq Http API
 *
 * This is the OpenAPI specification of the RabbitMQ HTTP API. For more information, please refer to [HTTP API](https://cdn.rawgit.com/rabbitmq/rabbitmq-management/v3.7.14/priv/www/api/index.html) official documentation.
 *
 * OpenAPI spec version: 1.0
 * Contact: carlos@adaptive.me
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Thinkcode.RabbitMQ.OpenAPI.Client.OpenAPIDateConverter;

namespace Thinkcode.RabbitMQ.OpenAPI.Model
{
    /// <summary>
    /// Queue
    /// </summary>
    [DataContract]
    public partial class Queue :  IEquatable<Queue>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Queue" /> class.
        /// </summary>
        /// <param name="arguments">arguments.</param>
        /// <param name="autoDelete">autoDelete.</param>
        /// <param name="backingQueueStatus">backingQueueStatus.</param>
        /// <param name="consumerDetails">consumerDetails.</param>
        /// <param name="consumers">consumers.</param>
        /// <param name="deliveries">deliveries.</param>
        /// <param name="durable">durable.</param>
        /// <param name="effectivePolicyDefinition">effectivePolicyDefinition.</param>
        /// <param name="exclusive">exclusive.</param>
        /// <param name="garbageCollection">garbageCollection.</param>
        /// <param name="idleSince">idleSince.</param>
        /// <param name="incoming">incoming.</param>
        /// <param name="memory">memory.</param>
        /// <param name="messageBytes">messageBytes.</param>
        /// <param name="messageBytesPagedOut">messageBytesPagedOut.</param>
        /// <param name="messageBytesPersistent">messageBytesPersistent.</param>
        /// <param name="messageBytesRam">messageBytesRam.</param>
        /// <param name="messageBytesReady">messageBytesReady.</param>
        /// <param name="messageBytesUnacknowledged">messageBytesUnacknowledged.</param>
        /// <param name="messageStats">messageStats.</param>
        /// <param name="messages">messages.</param>
        /// <param name="messagesDetails">messagesDetails.</param>
        /// <param name="messagesPagedOut">messagesPagedOut.</param>
        /// <param name="messagesPersistent">messagesPersistent.</param>
        /// <param name="messagesRam">messagesRam.</param>
        /// <param name="messagesReady">messagesReady.</param>
        /// <param name="messagesReadyDetails">messagesReadyDetails.</param>
        /// <param name="messagesReadyRam">messagesReadyRam.</param>
        /// <param name="messagesUnacknowledged">messagesUnacknowledged.</param>
        /// <param name="messagesUnacknowledgedDetails">messagesUnacknowledgedDetails.</param>
        /// <param name="messagesUnacknowledgedRam">messagesUnacknowledgedRam.</param>
        /// <param name="name">name.</param>
        /// <param name="node">node.</param>
        /// <param name="reductions">reductions.</param>
        /// <param name="reductionsDetails">reductionsDetails.</param>
        /// <param name="state">state.</param>
        /// <param name="vhost">vhost.</param>
        public Queue(BindingRequestArguments arguments = default(BindingRequestArguments), bool autoDelete = default(bool), QueueBackingQueueStatus backingQueueStatus = default(QueueBackingQueueStatus), Collection<Object> consumerDetails = default(Collection<Object>), int consumers = default(int), Collection<Object> deliveries = default(Collection<Object>), bool durable = default(bool), Collection<Object> effectivePolicyDefinition = default(Collection<Object>), bool exclusive = default(bool), QueueGarbageCollection garbageCollection = default(QueueGarbageCollection), string idleSince = default(string), Collection<Object> incoming = default(Collection<Object>), int memory = default(int), int messageBytes = default(int), int messageBytesPagedOut = default(int), int messageBytesPersistent = default(int), int messageBytesRam = default(int), int messageBytesReady = default(int), int messageBytesUnacknowledged = default(int), QueueMessageStats messageStats = default(QueueMessageStats), int messages = default(int), ExchangeMessageStatsPublishInDetails messagesDetails = default(ExchangeMessageStatsPublishInDetails), int messagesPagedOut = default(int), int messagesPersistent = default(int), int messagesRam = default(int), int messagesReady = default(int), ExchangeMessageStatsPublishInDetails messagesReadyDetails = default(ExchangeMessageStatsPublishInDetails), int messagesReadyRam = default(int), int messagesUnacknowledged = default(int), ExchangeMessageStatsPublishInDetails messagesUnacknowledgedDetails = default(ExchangeMessageStatsPublishInDetails), int messagesUnacknowledgedRam = default(int), string name = default(string), string node = default(string), int reductions = default(int), ExchangeMessageStatsPublishInDetails reductionsDetails = default(ExchangeMessageStatsPublishInDetails), string state = default(string), string vhost = default(string))
        {
            this.Arguments = arguments;
            this.AutoDelete = autoDelete;
            this.BackingQueueStatus = backingQueueStatus;
            this.ConsumerDetails = consumerDetails;
            this.Consumers = consumers;
            this.Deliveries = deliveries;
            this.Durable = durable;
            this.EffectivePolicyDefinition = effectivePolicyDefinition;
            this.Exclusive = exclusive;
            this.GarbageCollection = garbageCollection;
            this.IdleSince = idleSince;
            this.Incoming = incoming;
            this.Memory = memory;
            this.MessageBytes = messageBytes;
            this.MessageBytesPagedOut = messageBytesPagedOut;
            this.MessageBytesPersistent = messageBytesPersistent;
            this.MessageBytesRam = messageBytesRam;
            this.MessageBytesReady = messageBytesReady;
            this.MessageBytesUnacknowledged = messageBytesUnacknowledged;
            this.MessageStats = messageStats;
            this.Messages = messages;
            this.MessagesDetails = messagesDetails;
            this.MessagesPagedOut = messagesPagedOut;
            this.MessagesPersistent = messagesPersistent;
            this.MessagesRam = messagesRam;
            this.MessagesReady = messagesReady;
            this.MessagesReadyDetails = messagesReadyDetails;
            this.MessagesReadyRam = messagesReadyRam;
            this.MessagesUnacknowledged = messagesUnacknowledged;
            this.MessagesUnacknowledgedDetails = messagesUnacknowledgedDetails;
            this.MessagesUnacknowledgedRam = messagesUnacknowledgedRam;
            this.Name = name;
            this.Node = node;
            this.Reductions = reductions;
            this.ReductionsDetails = reductionsDetails;
            this.State = state;
            this.Vhost = vhost;
        }
        
        /// <summary>
        /// Gets or Sets Arguments
        /// </summary>
        [DataMember(Name="arguments", EmitDefaultValue=false)]
        public BindingRequestArguments Arguments { get; set; }

        /// <summary>
        /// Gets or Sets AutoDelete
        /// </summary>
        [DataMember(Name="auto_delete", EmitDefaultValue=false)]
        public bool AutoDelete { get; set; }

        /// <summary>
        /// Gets or Sets BackingQueueStatus
        /// </summary>
        [DataMember(Name="backing_queue_status", EmitDefaultValue=false)]
        public QueueBackingQueueStatus BackingQueueStatus { get; set; }

        /// <summary>
        /// Gets or Sets ConsumerDetails
        /// </summary>
        [DataMember(Name="consumer_details", EmitDefaultValue=false)]
        public Collection<Object> ConsumerDetails { get; set; }

        /// <summary>
        /// Gets or Sets Consumers
        /// </summary>
        [DataMember(Name="consumers", EmitDefaultValue=false)]
        public int Consumers { get; set; }

        /// <summary>
        /// Gets or Sets Deliveries
        /// </summary>
        [DataMember(Name="deliveries", EmitDefaultValue=false)]
        public Collection<Object> Deliveries { get; set; }

        /// <summary>
        /// Gets or Sets Durable
        /// </summary>
        [DataMember(Name="durable", EmitDefaultValue=false)]
        public bool Durable { get; set; }

        /// <summary>
        /// Gets or Sets EffectivePolicyDefinition
        /// </summary>
        [DataMember(Name="effective_policy_definition", EmitDefaultValue=false)]
        public Collection<Object> EffectivePolicyDefinition { get; set; }

        /// <summary>
        /// Gets or Sets Exclusive
        /// </summary>
        [DataMember(Name="exclusive", EmitDefaultValue=false)]
        public bool Exclusive { get; set; }

        /// <summary>
        /// Gets or Sets GarbageCollection
        /// </summary>
        [DataMember(Name="garbage_collection", EmitDefaultValue=false)]
        public QueueGarbageCollection GarbageCollection { get; set; }

        /// <summary>
        /// Gets or Sets IdleSince
        /// </summary>
        [DataMember(Name="idle_since", EmitDefaultValue=false)]
        public string IdleSince { get; set; }

        /// <summary>
        /// Gets or Sets Incoming
        /// </summary>
        [DataMember(Name="incoming", EmitDefaultValue=false)]
        public Collection<Object> Incoming { get; set; }

        /// <summary>
        /// Gets or Sets Memory
        /// </summary>
        [DataMember(Name="memory", EmitDefaultValue=false)]
        public int Memory { get; set; }

        /// <summary>
        /// Gets or Sets MessageBytes
        /// </summary>
        [DataMember(Name="message_bytes", EmitDefaultValue=false)]
        public int MessageBytes { get; set; }

        /// <summary>
        /// Gets or Sets MessageBytesPagedOut
        /// </summary>
        [DataMember(Name="message_bytes_paged_out", EmitDefaultValue=false)]
        public int MessageBytesPagedOut { get; set; }

        /// <summary>
        /// Gets or Sets MessageBytesPersistent
        /// </summary>
        [DataMember(Name="message_bytes_persistent", EmitDefaultValue=false)]
        public int MessageBytesPersistent { get; set; }

        /// <summary>
        /// Gets or Sets MessageBytesRam
        /// </summary>
        [DataMember(Name="message_bytes_ram", EmitDefaultValue=false)]
        public int MessageBytesRam { get; set; }

        /// <summary>
        /// Gets or Sets MessageBytesReady
        /// </summary>
        [DataMember(Name="message_bytes_ready", EmitDefaultValue=false)]
        public int MessageBytesReady { get; set; }

        /// <summary>
        /// Gets or Sets MessageBytesUnacknowledged
        /// </summary>
        [DataMember(Name="message_bytes_unacknowledged", EmitDefaultValue=false)]
        public int MessageBytesUnacknowledged { get; set; }

        /// <summary>
        /// Gets or Sets MessageStats
        /// </summary>
        [DataMember(Name="message_stats", EmitDefaultValue=false)]
        public QueueMessageStats MessageStats { get; set; }

        /// <summary>
        /// Gets or Sets Messages
        /// </summary>
        [DataMember(Name="messages", EmitDefaultValue=false)]
        public int Messages { get; set; }

        /// <summary>
        /// Gets or Sets MessagesDetails
        /// </summary>
        [DataMember(Name="messages_details", EmitDefaultValue=false)]
        public ExchangeMessageStatsPublishInDetails MessagesDetails { get; set; }

        /// <summary>
        /// Gets or Sets MessagesPagedOut
        /// </summary>
        [DataMember(Name="messages_paged_out", EmitDefaultValue=false)]
        public int MessagesPagedOut { get; set; }

        /// <summary>
        /// Gets or Sets MessagesPersistent
        /// </summary>
        [DataMember(Name="messages_persistent", EmitDefaultValue=false)]
        public int MessagesPersistent { get; set; }

        /// <summary>
        /// Gets or Sets MessagesRam
        /// </summary>
        [DataMember(Name="messages_ram", EmitDefaultValue=false)]
        public int MessagesRam { get; set; }

        /// <summary>
        /// Gets or Sets MessagesReady
        /// </summary>
        [DataMember(Name="messages_ready", EmitDefaultValue=false)]
        public int MessagesReady { get; set; }

        /// <summary>
        /// Gets or Sets MessagesReadyDetails
        /// </summary>
        [DataMember(Name="messages_ready_details", EmitDefaultValue=false)]
        public ExchangeMessageStatsPublishInDetails MessagesReadyDetails { get; set; }

        /// <summary>
        /// Gets or Sets MessagesReadyRam
        /// </summary>
        [DataMember(Name="messages_ready_ram", EmitDefaultValue=false)]
        public int MessagesReadyRam { get; set; }

        /// <summary>
        /// Gets or Sets MessagesUnacknowledged
        /// </summary>
        [DataMember(Name="messages_unacknowledged", EmitDefaultValue=false)]
        public int MessagesUnacknowledged { get; set; }

        /// <summary>
        /// Gets or Sets MessagesUnacknowledgedDetails
        /// </summary>
        [DataMember(Name="messages_unacknowledged_details", EmitDefaultValue=false)]
        public ExchangeMessageStatsPublishInDetails MessagesUnacknowledgedDetails { get; set; }

        /// <summary>
        /// Gets or Sets MessagesUnacknowledgedRam
        /// </summary>
        [DataMember(Name="messages_unacknowledged_ram", EmitDefaultValue=false)]
        public int MessagesUnacknowledgedRam { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Node
        /// </summary>
        [DataMember(Name="node", EmitDefaultValue=false)]
        public string Node { get; set; }

        /// <summary>
        /// Gets or Sets Reductions
        /// </summary>
        [DataMember(Name="reductions", EmitDefaultValue=false)]
        public int Reductions { get; set; }

        /// <summary>
        /// Gets or Sets ReductionsDetails
        /// </summary>
        [DataMember(Name="reductions_details", EmitDefaultValue=false)]
        public ExchangeMessageStatsPublishInDetails ReductionsDetails { get; set; }

        /// <summary>
        /// Gets or Sets State
        /// </summary>
        [DataMember(Name="state", EmitDefaultValue=false)]
        public string State { get; set; }

        /// <summary>
        /// Gets or Sets Vhost
        /// </summary>
        [DataMember(Name="vhost", EmitDefaultValue=false)]
        public string Vhost { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Queue {\n");
            sb.Append("  Arguments: ").Append(Arguments).Append("\n");
            sb.Append("  AutoDelete: ").Append(AutoDelete).Append("\n");
            sb.Append("  BackingQueueStatus: ").Append(BackingQueueStatus).Append("\n");
            sb.Append("  ConsumerDetails: ").Append(ConsumerDetails).Append("\n");
            sb.Append("  Consumers: ").Append(Consumers).Append("\n");
            sb.Append("  Deliveries: ").Append(Deliveries).Append("\n");
            sb.Append("  Durable: ").Append(Durable).Append("\n");
            sb.Append("  EffectivePolicyDefinition: ").Append(EffectivePolicyDefinition).Append("\n");
            sb.Append("  Exclusive: ").Append(Exclusive).Append("\n");
            sb.Append("  GarbageCollection: ").Append(GarbageCollection).Append("\n");
            sb.Append("  IdleSince: ").Append(IdleSince).Append("\n");
            sb.Append("  Incoming: ").Append(Incoming).Append("\n");
            sb.Append("  Memory: ").Append(Memory).Append("\n");
            sb.Append("  MessageBytes: ").Append(MessageBytes).Append("\n");
            sb.Append("  MessageBytesPagedOut: ").Append(MessageBytesPagedOut).Append("\n");
            sb.Append("  MessageBytesPersistent: ").Append(MessageBytesPersistent).Append("\n");
            sb.Append("  MessageBytesRam: ").Append(MessageBytesRam).Append("\n");
            sb.Append("  MessageBytesReady: ").Append(MessageBytesReady).Append("\n");
            sb.Append("  MessageBytesUnacknowledged: ").Append(MessageBytesUnacknowledged).Append("\n");
            sb.Append("  MessageStats: ").Append(MessageStats).Append("\n");
            sb.Append("  Messages: ").Append(Messages).Append("\n");
            sb.Append("  MessagesDetails: ").Append(MessagesDetails).Append("\n");
            sb.Append("  MessagesPagedOut: ").Append(MessagesPagedOut).Append("\n");
            sb.Append("  MessagesPersistent: ").Append(MessagesPersistent).Append("\n");
            sb.Append("  MessagesRam: ").Append(MessagesRam).Append("\n");
            sb.Append("  MessagesReady: ").Append(MessagesReady).Append("\n");
            sb.Append("  MessagesReadyDetails: ").Append(MessagesReadyDetails).Append("\n");
            sb.Append("  MessagesReadyRam: ").Append(MessagesReadyRam).Append("\n");
            sb.Append("  MessagesUnacknowledged: ").Append(MessagesUnacknowledged).Append("\n");
            sb.Append("  MessagesUnacknowledgedDetails: ").Append(MessagesUnacknowledgedDetails).Append("\n");
            sb.Append("  MessagesUnacknowledgedRam: ").Append(MessagesUnacknowledgedRam).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Node: ").Append(Node).Append("\n");
            sb.Append("  Reductions: ").Append(Reductions).Append("\n");
            sb.Append("  ReductionsDetails: ").Append(ReductionsDetails).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  Vhost: ").Append(Vhost).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Queue);
        }

        /// <summary>
        /// Returns true if Queue instances are equal
        /// </summary>
        /// <param name="input">Instance of Queue to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Queue input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Arguments == input.Arguments ||
                    (this.Arguments != null &&
                    this.Arguments.Equals(input.Arguments))
                ) && 
                (
                    this.AutoDelete == input.AutoDelete ||
                    (this.AutoDelete != null &&
                    this.AutoDelete.Equals(input.AutoDelete))
                ) && 
                (
                    this.BackingQueueStatus == input.BackingQueueStatus ||
                    (this.BackingQueueStatus != null &&
                    this.BackingQueueStatus.Equals(input.BackingQueueStatus))
                ) && 
                (
                    this.ConsumerDetails == input.ConsumerDetails ||
                    this.ConsumerDetails != null &&
                    this.ConsumerDetails.SequenceEqual(input.ConsumerDetails)
                ) && 
                (
                    this.Consumers == input.Consumers ||
                    (this.Consumers != null &&
                    this.Consumers.Equals(input.Consumers))
                ) && 
                (
                    this.Deliveries == input.Deliveries ||
                    this.Deliveries != null &&
                    this.Deliveries.SequenceEqual(input.Deliveries)
                ) && 
                (
                    this.Durable == input.Durable ||
                    (this.Durable != null &&
                    this.Durable.Equals(input.Durable))
                ) && 
                (
                    this.EffectivePolicyDefinition == input.EffectivePolicyDefinition ||
                    this.EffectivePolicyDefinition != null &&
                    this.EffectivePolicyDefinition.SequenceEqual(input.EffectivePolicyDefinition)
                ) && 
                (
                    this.Exclusive == input.Exclusive ||
                    (this.Exclusive != null &&
                    this.Exclusive.Equals(input.Exclusive))
                ) && 
                (
                    this.GarbageCollection == input.GarbageCollection ||
                    (this.GarbageCollection != null &&
                    this.GarbageCollection.Equals(input.GarbageCollection))
                ) && 
                (
                    this.IdleSince == input.IdleSince ||
                    (this.IdleSince != null &&
                    this.IdleSince.Equals(input.IdleSince))
                ) && 
                (
                    this.Incoming == input.Incoming ||
                    this.Incoming != null &&
                    this.Incoming.SequenceEqual(input.Incoming)
                ) && 
                (
                    this.Memory == input.Memory ||
                    (this.Memory != null &&
                    this.Memory.Equals(input.Memory))
                ) && 
                (
                    this.MessageBytes == input.MessageBytes ||
                    (this.MessageBytes != null &&
                    this.MessageBytes.Equals(input.MessageBytes))
                ) && 
                (
                    this.MessageBytesPagedOut == input.MessageBytesPagedOut ||
                    (this.MessageBytesPagedOut != null &&
                    this.MessageBytesPagedOut.Equals(input.MessageBytesPagedOut))
                ) && 
                (
                    this.MessageBytesPersistent == input.MessageBytesPersistent ||
                    (this.MessageBytesPersistent != null &&
                    this.MessageBytesPersistent.Equals(input.MessageBytesPersistent))
                ) && 
                (
                    this.MessageBytesRam == input.MessageBytesRam ||
                    (this.MessageBytesRam != null &&
                    this.MessageBytesRam.Equals(input.MessageBytesRam))
                ) && 
                (
                    this.MessageBytesReady == input.MessageBytesReady ||
                    (this.MessageBytesReady != null &&
                    this.MessageBytesReady.Equals(input.MessageBytesReady))
                ) && 
                (
                    this.MessageBytesUnacknowledged == input.MessageBytesUnacknowledged ||
                    (this.MessageBytesUnacknowledged != null &&
                    this.MessageBytesUnacknowledged.Equals(input.MessageBytesUnacknowledged))
                ) && 
                (
                    this.MessageStats == input.MessageStats ||
                    (this.MessageStats != null &&
                    this.MessageStats.Equals(input.MessageStats))
                ) && 
                (
                    this.Messages == input.Messages ||
                    (this.Messages != null &&
                    this.Messages.Equals(input.Messages))
                ) && 
                (
                    this.MessagesDetails == input.MessagesDetails ||
                    (this.MessagesDetails != null &&
                    this.MessagesDetails.Equals(input.MessagesDetails))
                ) && 
                (
                    this.MessagesPagedOut == input.MessagesPagedOut ||
                    (this.MessagesPagedOut != null &&
                    this.MessagesPagedOut.Equals(input.MessagesPagedOut))
                ) && 
                (
                    this.MessagesPersistent == input.MessagesPersistent ||
                    (this.MessagesPersistent != null &&
                    this.MessagesPersistent.Equals(input.MessagesPersistent))
                ) && 
                (
                    this.MessagesRam == input.MessagesRam ||
                    (this.MessagesRam != null &&
                    this.MessagesRam.Equals(input.MessagesRam))
                ) && 
                (
                    this.MessagesReady == input.MessagesReady ||
                    (this.MessagesReady != null &&
                    this.MessagesReady.Equals(input.MessagesReady))
                ) && 
                (
                    this.MessagesReadyDetails == input.MessagesReadyDetails ||
                    (this.MessagesReadyDetails != null &&
                    this.MessagesReadyDetails.Equals(input.MessagesReadyDetails))
                ) && 
                (
                    this.MessagesReadyRam == input.MessagesReadyRam ||
                    (this.MessagesReadyRam != null &&
                    this.MessagesReadyRam.Equals(input.MessagesReadyRam))
                ) && 
                (
                    this.MessagesUnacknowledged == input.MessagesUnacknowledged ||
                    (this.MessagesUnacknowledged != null &&
                    this.MessagesUnacknowledged.Equals(input.MessagesUnacknowledged))
                ) && 
                (
                    this.MessagesUnacknowledgedDetails == input.MessagesUnacknowledgedDetails ||
                    (this.MessagesUnacknowledgedDetails != null &&
                    this.MessagesUnacknowledgedDetails.Equals(input.MessagesUnacknowledgedDetails))
                ) && 
                (
                    this.MessagesUnacknowledgedRam == input.MessagesUnacknowledgedRam ||
                    (this.MessagesUnacknowledgedRam != null &&
                    this.MessagesUnacknowledgedRam.Equals(input.MessagesUnacknowledgedRam))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Node == input.Node ||
                    (this.Node != null &&
                    this.Node.Equals(input.Node))
                ) && 
                (
                    this.Reductions == input.Reductions ||
                    (this.Reductions != null &&
                    this.Reductions.Equals(input.Reductions))
                ) && 
                (
                    this.ReductionsDetails == input.ReductionsDetails ||
                    (this.ReductionsDetails != null &&
                    this.ReductionsDetails.Equals(input.ReductionsDetails))
                ) && 
                (
                    this.State == input.State ||
                    (this.State != null &&
                    this.State.Equals(input.State))
                ) && 
                (
                    this.Vhost == input.Vhost ||
                    (this.Vhost != null &&
                    this.Vhost.Equals(input.Vhost))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Arguments != null)
                    hashCode = hashCode * 59 + this.Arguments.GetHashCode();
                if (this.AutoDelete != null)
                    hashCode = hashCode * 59 + this.AutoDelete.GetHashCode();
                if (this.BackingQueueStatus != null)
                    hashCode = hashCode * 59 + this.BackingQueueStatus.GetHashCode();
                if (this.ConsumerDetails != null)
                    hashCode = hashCode * 59 + this.ConsumerDetails.GetHashCode();
                if (this.Consumers != null)
                    hashCode = hashCode * 59 + this.Consumers.GetHashCode();
                if (this.Deliveries != null)
                    hashCode = hashCode * 59 + this.Deliveries.GetHashCode();
                if (this.Durable != null)
                    hashCode = hashCode * 59 + this.Durable.GetHashCode();
                if (this.EffectivePolicyDefinition != null)
                    hashCode = hashCode * 59 + this.EffectivePolicyDefinition.GetHashCode();
                if (this.Exclusive != null)
                    hashCode = hashCode * 59 + this.Exclusive.GetHashCode();
                if (this.GarbageCollection != null)
                    hashCode = hashCode * 59 + this.GarbageCollection.GetHashCode();
                if (this.IdleSince != null)
                    hashCode = hashCode * 59 + this.IdleSince.GetHashCode();
                if (this.Incoming != null)
                    hashCode = hashCode * 59 + this.Incoming.GetHashCode();
                if (this.Memory != null)
                    hashCode = hashCode * 59 + this.Memory.GetHashCode();
                if (this.MessageBytes != null)
                    hashCode = hashCode * 59 + this.MessageBytes.GetHashCode();
                if (this.MessageBytesPagedOut != null)
                    hashCode = hashCode * 59 + this.MessageBytesPagedOut.GetHashCode();
                if (this.MessageBytesPersistent != null)
                    hashCode = hashCode * 59 + this.MessageBytesPersistent.GetHashCode();
                if (this.MessageBytesRam != null)
                    hashCode = hashCode * 59 + this.MessageBytesRam.GetHashCode();
                if (this.MessageBytesReady != null)
                    hashCode = hashCode * 59 + this.MessageBytesReady.GetHashCode();
                if (this.MessageBytesUnacknowledged != null)
                    hashCode = hashCode * 59 + this.MessageBytesUnacknowledged.GetHashCode();
                if (this.MessageStats != null)
                    hashCode = hashCode * 59 + this.MessageStats.GetHashCode();
                if (this.Messages != null)
                    hashCode = hashCode * 59 + this.Messages.GetHashCode();
                if (this.MessagesDetails != null)
                    hashCode = hashCode * 59 + this.MessagesDetails.GetHashCode();
                if (this.MessagesPagedOut != null)
                    hashCode = hashCode * 59 + this.MessagesPagedOut.GetHashCode();
                if (this.MessagesPersistent != null)
                    hashCode = hashCode * 59 + this.MessagesPersistent.GetHashCode();
                if (this.MessagesRam != null)
                    hashCode = hashCode * 59 + this.MessagesRam.GetHashCode();
                if (this.MessagesReady != null)
                    hashCode = hashCode * 59 + this.MessagesReady.GetHashCode();
                if (this.MessagesReadyDetails != null)
                    hashCode = hashCode * 59 + this.MessagesReadyDetails.GetHashCode();
                if (this.MessagesReadyRam != null)
                    hashCode = hashCode * 59 + this.MessagesReadyRam.GetHashCode();
                if (this.MessagesUnacknowledged != null)
                    hashCode = hashCode * 59 + this.MessagesUnacknowledged.GetHashCode();
                if (this.MessagesUnacknowledgedDetails != null)
                    hashCode = hashCode * 59 + this.MessagesUnacknowledgedDetails.GetHashCode();
                if (this.MessagesUnacknowledgedRam != null)
                    hashCode = hashCode * 59 + this.MessagesUnacknowledgedRam.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Node != null)
                    hashCode = hashCode * 59 + this.Node.GetHashCode();
                if (this.Reductions != null)
                    hashCode = hashCode * 59 + this.Reductions.GetHashCode();
                if (this.ReductionsDetails != null)
                    hashCode = hashCode * 59 + this.ReductionsDetails.GetHashCode();
                if (this.State != null)
                    hashCode = hashCode * 59 + this.State.GetHashCode();
                if (this.Vhost != null)
                    hashCode = hashCode * 59 + this.Vhost.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
