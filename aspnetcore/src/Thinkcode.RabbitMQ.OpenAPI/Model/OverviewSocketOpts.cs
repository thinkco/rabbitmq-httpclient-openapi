/* 
 * Rabbitmq Http API
 *
 * This is the OpenAPI specification of the RabbitMQ HTTP API. For more information, please refer to [HTTP API](https://cdn.rawgit.com/rabbitmq/rabbitmq-management/v3.7.14/priv/www/api/index.html) official documentation.
 *
 * OpenAPI spec version: 1.0
 * Contact: carlos@adaptive.me
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Thinkcode.RabbitMQ.OpenAPI.Client.OpenAPIDateConverter;

namespace Thinkcode.RabbitMQ.OpenAPI.Model
{
    /// <summary>
    /// OverviewSocketOpts
    /// </summary>
    [DataContract]
    public partial class OverviewSocketOpts :  IEquatable<OverviewSocketOpts>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OverviewSocketOpts" /> class.
        /// </summary>
        /// <param name="backlog">backlog.</param>
        /// <param name="connectionType">connectionType.</param>
        /// <param name="linger">linger.</param>
        /// <param name="port">port.</param>
        /// <param name="exitOnClose">exitOnClose.</param>
        /// <param name="nodelay">nodelay.</param>
        public OverviewSocketOpts(int backlog = default(int), string connectionType = default(string), Collection<int> linger = default(Collection<int>), int port = default(int), bool exitOnClose = default(bool), bool nodelay = default(bool))
        {
            this.Backlog = backlog;
            this.ConnectionType = connectionType;
            this.Linger = linger;
            this.Port = port;
            this.ExitOnClose = exitOnClose;
            this.Nodelay = nodelay;
        }
        
        /// <summary>
        /// Gets or Sets Backlog
        /// </summary>
        [DataMember(Name="backlog", EmitDefaultValue=false)]
        public int Backlog { get; set; }

        /// <summary>
        /// Gets or Sets ConnectionType
        /// </summary>
        [DataMember(Name="connection_type", EmitDefaultValue=false)]
        public string ConnectionType { get; set; }

        /// <summary>
        /// Gets or Sets Linger
        /// </summary>
        [DataMember(Name="linger", EmitDefaultValue=false)]
        public Collection<int> Linger { get; set; }

        /// <summary>
        /// Gets or Sets Port
        /// </summary>
        [DataMember(Name="port", EmitDefaultValue=false)]
        public int Port { get; set; }

        /// <summary>
        /// Gets or Sets ExitOnClose
        /// </summary>
        [DataMember(Name="exit_on_close", EmitDefaultValue=false)]
        public bool ExitOnClose { get; set; }

        /// <summary>
        /// Gets or Sets Nodelay
        /// </summary>
        [DataMember(Name="nodelay", EmitDefaultValue=false)]
        public bool Nodelay { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OverviewSocketOpts {\n");
            sb.Append("  Backlog: ").Append(Backlog).Append("\n");
            sb.Append("  ConnectionType: ").Append(ConnectionType).Append("\n");
            sb.Append("  Linger: ").Append(Linger).Append("\n");
            sb.Append("  Port: ").Append(Port).Append("\n");
            sb.Append("  ExitOnClose: ").Append(ExitOnClose).Append("\n");
            sb.Append("  Nodelay: ").Append(Nodelay).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OverviewSocketOpts);
        }

        /// <summary>
        /// Returns true if OverviewSocketOpts instances are equal
        /// </summary>
        /// <param name="input">Instance of OverviewSocketOpts to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OverviewSocketOpts input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Backlog == input.Backlog ||
                    (this.Backlog != null &&
                    this.Backlog.Equals(input.Backlog))
                ) && 
                (
                    this.ConnectionType == input.ConnectionType ||
                    (this.ConnectionType != null &&
                    this.ConnectionType.Equals(input.ConnectionType))
                ) && 
                (
                    this.Linger == input.Linger ||
                    this.Linger != null &&
                    this.Linger.SequenceEqual(input.Linger)
                ) && 
                (
                    this.Port == input.Port ||
                    (this.Port != null &&
                    this.Port.Equals(input.Port))
                ) && 
                (
                    this.ExitOnClose == input.ExitOnClose ||
                    (this.ExitOnClose != null &&
                    this.ExitOnClose.Equals(input.ExitOnClose))
                ) && 
                (
                    this.Nodelay == input.Nodelay ||
                    (this.Nodelay != null &&
                    this.Nodelay.Equals(input.Nodelay))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Backlog != null)
                    hashCode = hashCode * 59 + this.Backlog.GetHashCode();
                if (this.ConnectionType != null)
                    hashCode = hashCode * 59 + this.ConnectionType.GetHashCode();
                if (this.Linger != null)
                    hashCode = hashCode * 59 + this.Linger.GetHashCode();
                if (this.Port != null)
                    hashCode = hashCode * 59 + this.Port.GetHashCode();
                if (this.ExitOnClose != null)
                    hashCode = hashCode * 59 + this.ExitOnClose.GetHashCode();
                if (this.Nodelay != null)
                    hashCode = hashCode * 59 + this.Nodelay.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
