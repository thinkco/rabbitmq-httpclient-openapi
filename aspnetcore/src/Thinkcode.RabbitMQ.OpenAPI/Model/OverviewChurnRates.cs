/* 
 * Rabbitmq Http API
 *
 * This is the OpenAPI specification of the RabbitMQ HTTP API. For more information, please refer to [HTTP API](https://cdn.rawgit.com/rabbitmq/rabbitmq-management/v3.7.14/priv/www/api/index.html) official documentation.
 *
 * OpenAPI spec version: 1.0
 * Contact: carlos@adaptive.me
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Thinkcode.RabbitMQ.OpenAPI.Client.OpenAPIDateConverter;

namespace Thinkcode.RabbitMQ.OpenAPI.Model
{
    /// <summary>
    /// OverviewChurnRates
    /// </summary>
    [DataContract]
    public partial class OverviewChurnRates :  IEquatable<OverviewChurnRates>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OverviewChurnRates" /> class.
        /// </summary>
        /// <param name="queueDeleted">queueDeleted.</param>
        /// <param name="channelCreatedDetails">channelCreatedDetails.</param>
        /// <param name="channelCreated">channelCreated.</param>
        /// <param name="channelClosed">channelClosed.</param>
        /// <param name="queueDeclaredDetails">queueDeclaredDetails.</param>
        /// <param name="connectionClosed">connectionClosed.</param>
        /// <param name="channelClosedDetails">channelClosedDetails.</param>
        /// <param name="queueCreated">queueCreated.</param>
        /// <param name="queueDeclared">queueDeclared.</param>
        /// <param name="connectionClosedDetails">connectionClosedDetails.</param>
        /// <param name="queueDeletedDetails">queueDeletedDetails.</param>
        /// <param name="connectionCreated">connectionCreated.</param>
        /// <param name="connectionCreatedDetails">connectionCreatedDetails.</param>
        /// <param name="queueCreatedDetails">queueCreatedDetails.</param>
        public OverviewChurnRates(int queueDeleted = default(int), ExchangeMessageStatsPublishInDetails channelCreatedDetails = default(ExchangeMessageStatsPublishInDetails), int channelCreated = default(int), int channelClosed = default(int), ExchangeMessageStatsPublishInDetails queueDeclaredDetails = default(ExchangeMessageStatsPublishInDetails), int connectionClosed = default(int), ExchangeMessageStatsPublishInDetails channelClosedDetails = default(ExchangeMessageStatsPublishInDetails), int queueCreated = default(int), int queueDeclared = default(int), ExchangeMessageStatsPublishInDetails connectionClosedDetails = default(ExchangeMessageStatsPublishInDetails), ExchangeMessageStatsPublishInDetails queueDeletedDetails = default(ExchangeMessageStatsPublishInDetails), int connectionCreated = default(int), ExchangeMessageStatsPublishInDetails connectionCreatedDetails = default(ExchangeMessageStatsPublishInDetails), ExchangeMessageStatsPublishInDetails queueCreatedDetails = default(ExchangeMessageStatsPublishInDetails))
        {
            this.QueueDeleted = queueDeleted;
            this.ChannelCreatedDetails = channelCreatedDetails;
            this.ChannelCreated = channelCreated;
            this.ChannelClosed = channelClosed;
            this.QueueDeclaredDetails = queueDeclaredDetails;
            this.ConnectionClosed = connectionClosed;
            this.ChannelClosedDetails = channelClosedDetails;
            this.QueueCreated = queueCreated;
            this.QueueDeclared = queueDeclared;
            this.ConnectionClosedDetails = connectionClosedDetails;
            this.QueueDeletedDetails = queueDeletedDetails;
            this.ConnectionCreated = connectionCreated;
            this.ConnectionCreatedDetails = connectionCreatedDetails;
            this.QueueCreatedDetails = queueCreatedDetails;
        }
        
        /// <summary>
        /// Gets or Sets QueueDeleted
        /// </summary>
        [DataMember(Name="queue_deleted", EmitDefaultValue=false)]
        public int QueueDeleted { get; set; }

        /// <summary>
        /// Gets or Sets ChannelCreatedDetails
        /// </summary>
        [DataMember(Name="channel_created_details", EmitDefaultValue=false)]
        public ExchangeMessageStatsPublishInDetails ChannelCreatedDetails { get; set; }

        /// <summary>
        /// Gets or Sets ChannelCreated
        /// </summary>
        [DataMember(Name="channel_created", EmitDefaultValue=false)]
        public int ChannelCreated { get; set; }

        /// <summary>
        /// Gets or Sets ChannelClosed
        /// </summary>
        [DataMember(Name="channel_closed", EmitDefaultValue=false)]
        public int ChannelClosed { get; set; }

        /// <summary>
        /// Gets or Sets QueueDeclaredDetails
        /// </summary>
        [DataMember(Name="queue_declared_details", EmitDefaultValue=false)]
        public ExchangeMessageStatsPublishInDetails QueueDeclaredDetails { get; set; }

        /// <summary>
        /// Gets or Sets ConnectionClosed
        /// </summary>
        [DataMember(Name="connection_closed", EmitDefaultValue=false)]
        public int ConnectionClosed { get; set; }

        /// <summary>
        /// Gets or Sets ChannelClosedDetails
        /// </summary>
        [DataMember(Name="channel_closed_details", EmitDefaultValue=false)]
        public ExchangeMessageStatsPublishInDetails ChannelClosedDetails { get; set; }

        /// <summary>
        /// Gets or Sets QueueCreated
        /// </summary>
        [DataMember(Name="queue_created", EmitDefaultValue=false)]
        public int QueueCreated { get; set; }

        /// <summary>
        /// Gets or Sets QueueDeclared
        /// </summary>
        [DataMember(Name="queue_declared", EmitDefaultValue=false)]
        public int QueueDeclared { get; set; }

        /// <summary>
        /// Gets or Sets ConnectionClosedDetails
        /// </summary>
        [DataMember(Name="connection_closed_details", EmitDefaultValue=false)]
        public ExchangeMessageStatsPublishInDetails ConnectionClosedDetails { get; set; }

        /// <summary>
        /// Gets or Sets QueueDeletedDetails
        /// </summary>
        [DataMember(Name="queue_deleted_details", EmitDefaultValue=false)]
        public ExchangeMessageStatsPublishInDetails QueueDeletedDetails { get; set; }

        /// <summary>
        /// Gets or Sets ConnectionCreated
        /// </summary>
        [DataMember(Name="connection_created", EmitDefaultValue=false)]
        public int ConnectionCreated { get; set; }

        /// <summary>
        /// Gets or Sets ConnectionCreatedDetails
        /// </summary>
        [DataMember(Name="connection_created_details", EmitDefaultValue=false)]
        public ExchangeMessageStatsPublishInDetails ConnectionCreatedDetails { get; set; }

        /// <summary>
        /// Gets or Sets QueueCreatedDetails
        /// </summary>
        [DataMember(Name="queue_created_details", EmitDefaultValue=false)]
        public ExchangeMessageStatsPublishInDetails QueueCreatedDetails { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OverviewChurnRates {\n");
            sb.Append("  QueueDeleted: ").Append(QueueDeleted).Append("\n");
            sb.Append("  ChannelCreatedDetails: ").Append(ChannelCreatedDetails).Append("\n");
            sb.Append("  ChannelCreated: ").Append(ChannelCreated).Append("\n");
            sb.Append("  ChannelClosed: ").Append(ChannelClosed).Append("\n");
            sb.Append("  QueueDeclaredDetails: ").Append(QueueDeclaredDetails).Append("\n");
            sb.Append("  ConnectionClosed: ").Append(ConnectionClosed).Append("\n");
            sb.Append("  ChannelClosedDetails: ").Append(ChannelClosedDetails).Append("\n");
            sb.Append("  QueueCreated: ").Append(QueueCreated).Append("\n");
            sb.Append("  QueueDeclared: ").Append(QueueDeclared).Append("\n");
            sb.Append("  ConnectionClosedDetails: ").Append(ConnectionClosedDetails).Append("\n");
            sb.Append("  QueueDeletedDetails: ").Append(QueueDeletedDetails).Append("\n");
            sb.Append("  ConnectionCreated: ").Append(ConnectionCreated).Append("\n");
            sb.Append("  ConnectionCreatedDetails: ").Append(ConnectionCreatedDetails).Append("\n");
            sb.Append("  QueueCreatedDetails: ").Append(QueueCreatedDetails).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OverviewChurnRates);
        }

        /// <summary>
        /// Returns true if OverviewChurnRates instances are equal
        /// </summary>
        /// <param name="input">Instance of OverviewChurnRates to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OverviewChurnRates input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.QueueDeleted == input.QueueDeleted ||
                    (this.QueueDeleted != null &&
                    this.QueueDeleted.Equals(input.QueueDeleted))
                ) && 
                (
                    this.ChannelCreatedDetails == input.ChannelCreatedDetails ||
                    (this.ChannelCreatedDetails != null &&
                    this.ChannelCreatedDetails.Equals(input.ChannelCreatedDetails))
                ) && 
                (
                    this.ChannelCreated == input.ChannelCreated ||
                    (this.ChannelCreated != null &&
                    this.ChannelCreated.Equals(input.ChannelCreated))
                ) && 
                (
                    this.ChannelClosed == input.ChannelClosed ||
                    (this.ChannelClosed != null &&
                    this.ChannelClosed.Equals(input.ChannelClosed))
                ) && 
                (
                    this.QueueDeclaredDetails == input.QueueDeclaredDetails ||
                    (this.QueueDeclaredDetails != null &&
                    this.QueueDeclaredDetails.Equals(input.QueueDeclaredDetails))
                ) && 
                (
                    this.ConnectionClosed == input.ConnectionClosed ||
                    (this.ConnectionClosed != null &&
                    this.ConnectionClosed.Equals(input.ConnectionClosed))
                ) && 
                (
                    this.ChannelClosedDetails == input.ChannelClosedDetails ||
                    (this.ChannelClosedDetails != null &&
                    this.ChannelClosedDetails.Equals(input.ChannelClosedDetails))
                ) && 
                (
                    this.QueueCreated == input.QueueCreated ||
                    (this.QueueCreated != null &&
                    this.QueueCreated.Equals(input.QueueCreated))
                ) && 
                (
                    this.QueueDeclared == input.QueueDeclared ||
                    (this.QueueDeclared != null &&
                    this.QueueDeclared.Equals(input.QueueDeclared))
                ) && 
                (
                    this.ConnectionClosedDetails == input.ConnectionClosedDetails ||
                    (this.ConnectionClosedDetails != null &&
                    this.ConnectionClosedDetails.Equals(input.ConnectionClosedDetails))
                ) && 
                (
                    this.QueueDeletedDetails == input.QueueDeletedDetails ||
                    (this.QueueDeletedDetails != null &&
                    this.QueueDeletedDetails.Equals(input.QueueDeletedDetails))
                ) && 
                (
                    this.ConnectionCreated == input.ConnectionCreated ||
                    (this.ConnectionCreated != null &&
                    this.ConnectionCreated.Equals(input.ConnectionCreated))
                ) && 
                (
                    this.ConnectionCreatedDetails == input.ConnectionCreatedDetails ||
                    (this.ConnectionCreatedDetails != null &&
                    this.ConnectionCreatedDetails.Equals(input.ConnectionCreatedDetails))
                ) && 
                (
                    this.QueueCreatedDetails == input.QueueCreatedDetails ||
                    (this.QueueCreatedDetails != null &&
                    this.QueueCreatedDetails.Equals(input.QueueCreatedDetails))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.QueueDeleted != null)
                    hashCode = hashCode * 59 + this.QueueDeleted.GetHashCode();
                if (this.ChannelCreatedDetails != null)
                    hashCode = hashCode * 59 + this.ChannelCreatedDetails.GetHashCode();
                if (this.ChannelCreated != null)
                    hashCode = hashCode * 59 + this.ChannelCreated.GetHashCode();
                if (this.ChannelClosed != null)
                    hashCode = hashCode * 59 + this.ChannelClosed.GetHashCode();
                if (this.QueueDeclaredDetails != null)
                    hashCode = hashCode * 59 + this.QueueDeclaredDetails.GetHashCode();
                if (this.ConnectionClosed != null)
                    hashCode = hashCode * 59 + this.ConnectionClosed.GetHashCode();
                if (this.ChannelClosedDetails != null)
                    hashCode = hashCode * 59 + this.ChannelClosedDetails.GetHashCode();
                if (this.QueueCreated != null)
                    hashCode = hashCode * 59 + this.QueueCreated.GetHashCode();
                if (this.QueueDeclared != null)
                    hashCode = hashCode * 59 + this.QueueDeclared.GetHashCode();
                if (this.ConnectionClosedDetails != null)
                    hashCode = hashCode * 59 + this.ConnectionClosedDetails.GetHashCode();
                if (this.QueueDeletedDetails != null)
                    hashCode = hashCode * 59 + this.QueueDeletedDetails.GetHashCode();
                if (this.ConnectionCreated != null)
                    hashCode = hashCode * 59 + this.ConnectionCreated.GetHashCode();
                if (this.ConnectionCreatedDetails != null)
                    hashCode = hashCode * 59 + this.ConnectionCreatedDetails.GetHashCode();
                if (this.QueueCreatedDetails != null)
                    hashCode = hashCode * 59 + this.QueueCreatedDetails.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
