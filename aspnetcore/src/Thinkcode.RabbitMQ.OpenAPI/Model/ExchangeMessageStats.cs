/* 
 * Rabbitmq Http API
 *
 * This is the OpenAPI specification of the RabbitMQ HTTP API. For more information, please refer to [HTTP API](https://cdn.rawgit.com/rabbitmq/rabbitmq-management/v3.7.14/priv/www/api/index.html) official documentation.
 *
 * OpenAPI spec version: 1.0
 * Contact: carlos@adaptive.me
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Thinkcode.RabbitMQ.OpenAPI.Client.OpenAPIDateConverter;

namespace Thinkcode.RabbitMQ.OpenAPI.Model
{
    /// <summary>
    /// ExchangeMessageStats
    /// </summary>
    [DataContract]
    public partial class ExchangeMessageStats :  IEquatable<ExchangeMessageStats>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ExchangeMessageStats" /> class.
        /// </summary>
        /// <param name="publishInDetails">publishInDetails.</param>
        /// <param name="publishOutDetails">publishOutDetails.</param>
        /// <param name="publishIn">publishIn.</param>
        /// <param name="publishOut">publishOut.</param>
        public ExchangeMessageStats(ExchangeMessageStatsPublishInDetails publishInDetails = default(ExchangeMessageStatsPublishInDetails), ExchangeMessageStatsPublishInDetails publishOutDetails = default(ExchangeMessageStatsPublishInDetails), int publishIn = default(int), int publishOut = default(int))
        {
            this.PublishInDetails = publishInDetails;
            this.PublishOutDetails = publishOutDetails;
            this.PublishIn = publishIn;
            this.PublishOut = publishOut;
        }
        
        /// <summary>
        /// Gets or Sets PublishInDetails
        /// </summary>
        [DataMember(Name="publish_in_details", EmitDefaultValue=false)]
        public ExchangeMessageStatsPublishInDetails PublishInDetails { get; set; }

        /// <summary>
        /// Gets or Sets PublishOutDetails
        /// </summary>
        [DataMember(Name="publish_out_details", EmitDefaultValue=false)]
        public ExchangeMessageStatsPublishInDetails PublishOutDetails { get; set; }

        /// <summary>
        /// Gets or Sets PublishIn
        /// </summary>
        [DataMember(Name="publish_in", EmitDefaultValue=false)]
        public int PublishIn { get; set; }

        /// <summary>
        /// Gets or Sets PublishOut
        /// </summary>
        [DataMember(Name="publish_out", EmitDefaultValue=false)]
        public int PublishOut { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ExchangeMessageStats {\n");
            sb.Append("  PublishInDetails: ").Append(PublishInDetails).Append("\n");
            sb.Append("  PublishOutDetails: ").Append(PublishOutDetails).Append("\n");
            sb.Append("  PublishIn: ").Append(PublishIn).Append("\n");
            sb.Append("  PublishOut: ").Append(PublishOut).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ExchangeMessageStats);
        }

        /// <summary>
        /// Returns true if ExchangeMessageStats instances are equal
        /// </summary>
        /// <param name="input">Instance of ExchangeMessageStats to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ExchangeMessageStats input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.PublishInDetails == input.PublishInDetails ||
                    (this.PublishInDetails != null &&
                    this.PublishInDetails.Equals(input.PublishInDetails))
                ) && 
                (
                    this.PublishOutDetails == input.PublishOutDetails ||
                    (this.PublishOutDetails != null &&
                    this.PublishOutDetails.Equals(input.PublishOutDetails))
                ) && 
                (
                    this.PublishIn == input.PublishIn ||
                    (this.PublishIn != null &&
                    this.PublishIn.Equals(input.PublishIn))
                ) && 
                (
                    this.PublishOut == input.PublishOut ||
                    (this.PublishOut != null &&
                    this.PublishOut.Equals(input.PublishOut))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PublishInDetails != null)
                    hashCode = hashCode * 59 + this.PublishInDetails.GetHashCode();
                if (this.PublishOutDetails != null)
                    hashCode = hashCode * 59 + this.PublishOutDetails.GetHashCode();
                if (this.PublishIn != null)
                    hashCode = hashCode * 59 + this.PublishIn.GetHashCode();
                if (this.PublishOut != null)
                    hashCode = hashCode * 59 + this.PublishOut.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
