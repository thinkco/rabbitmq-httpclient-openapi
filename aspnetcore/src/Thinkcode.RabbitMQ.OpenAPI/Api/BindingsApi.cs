/* 
 * Rabbitmq Http API
 *
 * This is the OpenAPI specification of the RabbitMQ HTTP API. For more information, please refer to [HTTP API](https://cdn.rawgit.com/rabbitmq/rabbitmq-management/v3.7.14/priv/www/api/index.html) official documentation.
 *
 * OpenAPI spec version: 1.0
 * Contact: carlos@adaptive.me
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Thinkcode.RabbitMQ.OpenAPI.Client;
using Thinkcode.RabbitMQ.OpenAPI.Model;

namespace Thinkcode.RabbitMQ.OpenAPI.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IBindingsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create Bindings for Queue
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Thinkcode.RabbitMQ.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vhost"></param>
        /// <param name="exchange"></param>
        /// <param name="queue"></param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        void CreateBindingsForQueueExchange (string vhost, string exchange, string queue, BindingRequest body = null);

        /// <summary>
        /// Create Bindings for Queue
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Thinkcode.RabbitMQ.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vhost"></param>
        /// <param name="exchange"></param>
        /// <param name="queue"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CreateBindingsForQueueExchangeWithHttpInfo (string vhost, string exchange, string queue, BindingRequest body = null);
        /// <summary>
        /// Delete Binding for Queue
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Thinkcode.RabbitMQ.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vhost"></param>
        /// <param name="exchange"></param>
        /// <param name="queue"></param>
        /// <param name="propertyKey"></param>
        /// <returns></returns>
        void DeleteBindingForQueueExchange (string vhost, string exchange, string queue, string propertyKey);

        /// <summary>
        /// Delete Binding for Queue
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Thinkcode.RabbitMQ.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vhost"></param>
        /// <param name="exchange"></param>
        /// <param name="queue"></param>
        /// <param name="propertyKey"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteBindingForQueueExchangeWithHttpInfo (string vhost, string exchange, string queue, string propertyKey);
        /// <summary>
        /// Get Binding for Queue
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Thinkcode.RabbitMQ.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vhost"></param>
        /// <param name="exchange"></param>
        /// <param name="queue"></param>
        /// <param name="propertyKey"></param>
        /// <returns>Binding</returns>
        Binding GetBindingForQueueExchange (string vhost, string exchange, string queue, string propertyKey);

        /// <summary>
        /// Get Binding for Queue
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Thinkcode.RabbitMQ.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vhost"></param>
        /// <param name="exchange"></param>
        /// <param name="queue"></param>
        /// <param name="propertyKey"></param>
        /// <returns>ApiResponse of Binding</returns>
        ApiResponse<Binding> GetBindingForQueueExchangeWithHttpInfo (string vhost, string exchange, string queue, string propertyKey);
        /// <summary>
        /// List Bindings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Thinkcode.RabbitMQ.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ICollection&lt;Binding&gt;</returns>
        ICollection<Binding> ListBindings ();

        /// <summary>
        /// List Bindings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Thinkcode.RabbitMQ.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ICollection&lt;Binding&gt;</returns>
        ApiResponse<ICollection<Binding>> ListBindingsWithHttpInfo ();
        /// <summary>
        /// List Bindings as Destination
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Thinkcode.RabbitMQ.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vhost"></param>
        /// <param name="exchange"></param>
        /// <returns>ICollection&lt;Binding&gt;</returns>
        ICollection<Binding> ListBindingsAsDestination (string vhost, string exchange);

        /// <summary>
        /// List Bindings as Destination
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Thinkcode.RabbitMQ.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vhost"></param>
        /// <param name="exchange"></param>
        /// <returns>ApiResponse of ICollection&lt;Binding&gt;</returns>
        ApiResponse<ICollection<Binding>> ListBindingsAsDestinationWithHttpInfo (string vhost, string exchange);
        /// <summary>
        /// List Bindings as Source
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Thinkcode.RabbitMQ.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vhost"></param>
        /// <param name="exchange"></param>
        /// <returns>ICollection&lt;Binding&gt;</returns>
        ICollection<Binding> ListBindingsAsSource (string vhost, string exchange);

        /// <summary>
        /// List Bindings as Source
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Thinkcode.RabbitMQ.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vhost"></param>
        /// <param name="exchange"></param>
        /// <returns>ApiResponse of ICollection&lt;Binding&gt;</returns>
        ApiResponse<ICollection<Binding>> ListBindingsAsSourceWithHttpInfo (string vhost, string exchange);
        /// <summary>
        /// List All Bindings for Queue
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Thinkcode.RabbitMQ.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vhost"></param>
        /// <param name="queue"></param>
        /// <returns>ICollection&lt;Binding&gt;</returns>
        ICollection<Binding> ListBindingsForQueue (string vhost, string queue);

        /// <summary>
        /// List All Bindings for Queue
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Thinkcode.RabbitMQ.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vhost"></param>
        /// <param name="queue"></param>
        /// <returns>ApiResponse of ICollection&lt;Binding&gt;</returns>
        ApiResponse<ICollection<Binding>> ListBindingsForQueueWithHttpInfo (string vhost, string queue);
        /// <summary>
        /// List Bindings for Queue
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Thinkcode.RabbitMQ.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vhost"></param>
        /// <param name="exchange"></param>
        /// <param name="queue"></param>
        /// <returns>ICollection&lt;Binding&gt;</returns>
        ICollection<Binding> ListBindingsForQueueExchange (string vhost, string exchange, string queue);

        /// <summary>
        /// List Bindings for Queue
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Thinkcode.RabbitMQ.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vhost"></param>
        /// <param name="exchange"></param>
        /// <param name="queue"></param>
        /// <returns>ApiResponse of ICollection&lt;Binding&gt;</returns>
        ApiResponse<ICollection<Binding>> ListBindingsForQueueExchangeWithHttpInfo (string vhost, string exchange, string queue);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IBindingsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Create Bindings for Queue
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Thinkcode.RabbitMQ.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vhost"></param>
        /// <param name="exchange"></param>
        /// <param name="queue"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CreateBindingsForQueueExchangeAsync (string vhost, string exchange, string queue, BindingRequest body = null);

        /// <summary>
        /// Create Bindings for Queue
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Thinkcode.RabbitMQ.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vhost"></param>
        /// <param name="exchange"></param>
        /// <param name="queue"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CreateBindingsForQueueExchangeAsyncWithHttpInfo (string vhost, string exchange, string queue, BindingRequest body = null);
        /// <summary>
        /// Delete Binding for Queue
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Thinkcode.RabbitMQ.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vhost"></param>
        /// <param name="exchange"></param>
        /// <param name="queue"></param>
        /// <param name="propertyKey"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteBindingForQueueExchangeAsync (string vhost, string exchange, string queue, string propertyKey);

        /// <summary>
        /// Delete Binding for Queue
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Thinkcode.RabbitMQ.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vhost"></param>
        /// <param name="exchange"></param>
        /// <param name="queue"></param>
        /// <param name="propertyKey"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteBindingForQueueExchangeAsyncWithHttpInfo (string vhost, string exchange, string queue, string propertyKey);
        /// <summary>
        /// Get Binding for Queue
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Thinkcode.RabbitMQ.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vhost"></param>
        /// <param name="exchange"></param>
        /// <param name="queue"></param>
        /// <param name="propertyKey"></param>
        /// <returns>Task of Binding</returns>
        System.Threading.Tasks.Task<Binding> GetBindingForQueueExchangeAsync (string vhost, string exchange, string queue, string propertyKey);

        /// <summary>
        /// Get Binding for Queue
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Thinkcode.RabbitMQ.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vhost"></param>
        /// <param name="exchange"></param>
        /// <param name="queue"></param>
        /// <param name="propertyKey"></param>
        /// <returns>Task of ApiResponse (Binding)</returns>
        System.Threading.Tasks.Task<ApiResponse<Binding>> GetBindingForQueueExchangeAsyncWithHttpInfo (string vhost, string exchange, string queue, string propertyKey);
        /// <summary>
        /// List Bindings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Thinkcode.RabbitMQ.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ICollection&lt;Binding&gt;</returns>
        System.Threading.Tasks.Task<ICollection<Binding>> ListBindingsAsync ();

        /// <summary>
        /// List Bindings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Thinkcode.RabbitMQ.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (ICollection&lt;Binding&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<ICollection<Binding>>> ListBindingsAsyncWithHttpInfo ();
        /// <summary>
        /// List Bindings as Destination
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Thinkcode.RabbitMQ.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vhost"></param>
        /// <param name="exchange"></param>
        /// <returns>Task of ICollection&lt;Binding&gt;</returns>
        System.Threading.Tasks.Task<ICollection<Binding>> ListBindingsAsDestinationAsync (string vhost, string exchange);

        /// <summary>
        /// List Bindings as Destination
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Thinkcode.RabbitMQ.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vhost"></param>
        /// <param name="exchange"></param>
        /// <returns>Task of ApiResponse (ICollection&lt;Binding&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<ICollection<Binding>>> ListBindingsAsDestinationAsyncWithHttpInfo (string vhost, string exchange);
        /// <summary>
        /// List Bindings as Source
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Thinkcode.RabbitMQ.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vhost"></param>
        /// <param name="exchange"></param>
        /// <returns>Task of ICollection&lt;Binding&gt;</returns>
        System.Threading.Tasks.Task<ICollection<Binding>> ListBindingsAsSourceAsync (string vhost, string exchange);

        /// <summary>
        /// List Bindings as Source
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Thinkcode.RabbitMQ.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vhost"></param>
        /// <param name="exchange"></param>
        /// <returns>Task of ApiResponse (ICollection&lt;Binding&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<ICollection<Binding>>> ListBindingsAsSourceAsyncWithHttpInfo (string vhost, string exchange);
        /// <summary>
        /// List All Bindings for Queue
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Thinkcode.RabbitMQ.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vhost"></param>
        /// <param name="queue"></param>
        /// <returns>Task of ICollection&lt;Binding&gt;</returns>
        System.Threading.Tasks.Task<ICollection<Binding>> ListBindingsForQueueAsync (string vhost, string queue);

        /// <summary>
        /// List All Bindings for Queue
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Thinkcode.RabbitMQ.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vhost"></param>
        /// <param name="queue"></param>
        /// <returns>Task of ApiResponse (ICollection&lt;Binding&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<ICollection<Binding>>> ListBindingsForQueueAsyncWithHttpInfo (string vhost, string queue);
        /// <summary>
        /// List Bindings for Queue
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Thinkcode.RabbitMQ.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vhost"></param>
        /// <param name="exchange"></param>
        /// <param name="queue"></param>
        /// <returns>Task of ICollection&lt;Binding&gt;</returns>
        System.Threading.Tasks.Task<ICollection<Binding>> ListBindingsForQueueExchangeAsync (string vhost, string exchange, string queue);

        /// <summary>
        /// List Bindings for Queue
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Thinkcode.RabbitMQ.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vhost"></param>
        /// <param name="exchange"></param>
        /// <param name="queue"></param>
        /// <returns>Task of ApiResponse (ICollection&lt;Binding&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<ICollection<Binding>>> ListBindingsForQueueExchangeAsyncWithHttpInfo (string vhost, string exchange, string queue);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IBindingsApi : IBindingsApiSync, IBindingsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class BindingsApi : IBindingsApi
    {
        private Thinkcode.RabbitMQ.OpenAPI.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="BindingsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public BindingsApi() : this((string) null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BindingsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public BindingsApi(String basePath)
        {
            this.Configuration = Thinkcode.RabbitMQ.OpenAPI.Client.Configuration.MergeConfigurations(
                Thinkcode.RabbitMQ.OpenAPI.Client.GlobalConfiguration.Instance,
                new Thinkcode.RabbitMQ.OpenAPI.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Thinkcode.RabbitMQ.OpenAPI.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Thinkcode.RabbitMQ.OpenAPI.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Thinkcode.RabbitMQ.OpenAPI.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BindingsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public BindingsApi(Thinkcode.RabbitMQ.OpenAPI.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Thinkcode.RabbitMQ.OpenAPI.Client.Configuration.MergeConfigurations(
                Thinkcode.RabbitMQ.OpenAPI.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Thinkcode.RabbitMQ.OpenAPI.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Thinkcode.RabbitMQ.OpenAPI.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Thinkcode.RabbitMQ.OpenAPI.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PetApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public BindingsApi(Thinkcode.RabbitMQ.OpenAPI.Client.ISynchronousClient client,Thinkcode.RabbitMQ.OpenAPI.Client.IAsynchronousClient asyncClient, Thinkcode.RabbitMQ.OpenAPI.Client.IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Thinkcode.RabbitMQ.OpenAPI.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Thinkcode.RabbitMQ.OpenAPI.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Thinkcode.RabbitMQ.OpenAPI.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Thinkcode.RabbitMQ.OpenAPI.Client.IReadableConfiguration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Thinkcode.RabbitMQ.OpenAPI.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Create Bindings for Queue 
        /// </summary>
        /// <exception cref="Thinkcode.RabbitMQ.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vhost"></param>
        /// <param name="exchange"></param>
        /// <param name="queue"></param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        public void CreateBindingsForQueueExchange (string vhost, string exchange, string queue, BindingRequest body = null)
        {
             CreateBindingsForQueueExchangeWithHttpInfo(vhost, exchange, queue, body);
        }

        /// <summary>
        /// Create Bindings for Queue 
        /// </summary>
        /// <exception cref="Thinkcode.RabbitMQ.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vhost"></param>
        /// <param name="exchange"></param>
        /// <param name="queue"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Thinkcode.RabbitMQ.OpenAPI.Client.ApiResponse<Object> CreateBindingsForQueueExchangeWithHttpInfo (string vhost, string exchange, string queue, BindingRequest body = null)
        {
            // verify the required parameter 'vhost' is set
            if (vhost == null)
                throw new Thinkcode.RabbitMQ.OpenAPI.Client.ApiException(400, "Missing required parameter 'vhost' when calling BindingsApi->CreateBindingsForQueueExchange");

            // verify the required parameter 'exchange' is set
            if (exchange == null)
                throw new Thinkcode.RabbitMQ.OpenAPI.Client.ApiException(400, "Missing required parameter 'exchange' when calling BindingsApi->CreateBindingsForQueueExchange");

            // verify the required parameter 'queue' is set
            if (queue == null)
                throw new Thinkcode.RabbitMQ.OpenAPI.Client.ApiException(400, "Missing required parameter 'queue' when calling BindingsApi->CreateBindingsForQueueExchange");

            Thinkcode.RabbitMQ.OpenAPI.Client.RequestOptions requestOptions = new Thinkcode.RabbitMQ.OpenAPI.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
            };

            var localVarContentType = Thinkcode.RabbitMQ.OpenAPI.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Thinkcode.RabbitMQ.OpenAPI.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (vhost != null)
                requestOptions.PathParameters.Add("vhost", Thinkcode.RabbitMQ.OpenAPI.Client.ClientUtils.ParameterToString(vhost)); // path parameter
            if (exchange != null)
                requestOptions.PathParameters.Add("exchange", Thinkcode.RabbitMQ.OpenAPI.Client.ClientUtils.ParameterToString(exchange)); // path parameter
            if (queue != null)
                requestOptions.PathParameters.Add("queue", Thinkcode.RabbitMQ.OpenAPI.Client.ClientUtils.ParameterToString(queue)); // path parameter
            requestOptions.Data = body;

            // authentication (basic_auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Basic " + Thinkcode.RabbitMQ.OpenAPI.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request

            var response = this.Client.Post<Object>("/bindings/{vhost}/e/{exchange}/q/{queue}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("CreateBindingsForQueueExchange", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Create Bindings for Queue 
        /// </summary>
        /// <exception cref="Thinkcode.RabbitMQ.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vhost"></param>
        /// <param name="exchange"></param>
        /// <param name="queue"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CreateBindingsForQueueExchangeAsync (string vhost, string exchange, string queue, BindingRequest body = null)
        {
             await CreateBindingsForQueueExchangeAsyncWithHttpInfo(vhost, exchange, queue, body);

        }

        /// <summary>
        /// Create Bindings for Queue 
        /// </summary>
        /// <exception cref="Thinkcode.RabbitMQ.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vhost"></param>
        /// <param name="exchange"></param>
        /// <param name="queue"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Thinkcode.RabbitMQ.OpenAPI.Client.ApiResponse<Object>> CreateBindingsForQueueExchangeAsyncWithHttpInfo (string vhost, string exchange, string queue, BindingRequest body = null)
        {
            // verify the required parameter 'vhost' is set
            if (vhost == null)
                throw new Thinkcode.RabbitMQ.OpenAPI.Client.ApiException(400, "Missing required parameter 'vhost' when calling BindingsApi->CreateBindingsForQueueExchange");

            // verify the required parameter 'exchange' is set
            if (exchange == null)
                throw new Thinkcode.RabbitMQ.OpenAPI.Client.ApiException(400, "Missing required parameter 'exchange' when calling BindingsApi->CreateBindingsForQueueExchange");

            // verify the required parameter 'queue' is set
            if (queue == null)
                throw new Thinkcode.RabbitMQ.OpenAPI.Client.ApiException(400, "Missing required parameter 'queue' when calling BindingsApi->CreateBindingsForQueueExchange");


            Thinkcode.RabbitMQ.OpenAPI.Client.RequestOptions requestOptions = new Thinkcode.RabbitMQ.OpenAPI.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (vhost != null)
                requestOptions.PathParameters.Add("vhost", Thinkcode.RabbitMQ.OpenAPI.Client.ClientUtils.ParameterToString(vhost)); // path parameter
            if (exchange != null)
                requestOptions.PathParameters.Add("exchange", Thinkcode.RabbitMQ.OpenAPI.Client.ClientUtils.ParameterToString(exchange)); // path parameter
            if (queue != null)
                requestOptions.PathParameters.Add("queue", Thinkcode.RabbitMQ.OpenAPI.Client.ClientUtils.ParameterToString(queue)); // path parameter
            requestOptions.Data = body;

            // authentication (basic_auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Basic " + Thinkcode.RabbitMQ.OpenAPI.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.PostAsync<Object>("/bindings/{vhost}/e/{exchange}/q/{queue}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("CreateBindingsForQueueExchange", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Delete Binding for Queue 
        /// </summary>
        /// <exception cref="Thinkcode.RabbitMQ.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vhost"></param>
        /// <param name="exchange"></param>
        /// <param name="queue"></param>
        /// <param name="propertyKey"></param>
        /// <returns></returns>
        public void DeleteBindingForQueueExchange (string vhost, string exchange, string queue, string propertyKey)
        {
             DeleteBindingForQueueExchangeWithHttpInfo(vhost, exchange, queue, propertyKey);
        }

        /// <summary>
        /// Delete Binding for Queue 
        /// </summary>
        /// <exception cref="Thinkcode.RabbitMQ.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vhost"></param>
        /// <param name="exchange"></param>
        /// <param name="queue"></param>
        /// <param name="propertyKey"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Thinkcode.RabbitMQ.OpenAPI.Client.ApiResponse<Object> DeleteBindingForQueueExchangeWithHttpInfo (string vhost, string exchange, string queue, string propertyKey)
        {
            // verify the required parameter 'vhost' is set
            if (vhost == null)
                throw new Thinkcode.RabbitMQ.OpenAPI.Client.ApiException(400, "Missing required parameter 'vhost' when calling BindingsApi->DeleteBindingForQueueExchange");

            // verify the required parameter 'exchange' is set
            if (exchange == null)
                throw new Thinkcode.RabbitMQ.OpenAPI.Client.ApiException(400, "Missing required parameter 'exchange' when calling BindingsApi->DeleteBindingForQueueExchange");

            // verify the required parameter 'queue' is set
            if (queue == null)
                throw new Thinkcode.RabbitMQ.OpenAPI.Client.ApiException(400, "Missing required parameter 'queue' when calling BindingsApi->DeleteBindingForQueueExchange");

            // verify the required parameter 'propertyKey' is set
            if (propertyKey == null)
                throw new Thinkcode.RabbitMQ.OpenAPI.Client.ApiException(400, "Missing required parameter 'propertyKey' when calling BindingsApi->DeleteBindingForQueueExchange");

            Thinkcode.RabbitMQ.OpenAPI.Client.RequestOptions requestOptions = new Thinkcode.RabbitMQ.OpenAPI.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Thinkcode.RabbitMQ.OpenAPI.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Thinkcode.RabbitMQ.OpenAPI.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (vhost != null)
                requestOptions.PathParameters.Add("vhost", Thinkcode.RabbitMQ.OpenAPI.Client.ClientUtils.ParameterToString(vhost)); // path parameter
            if (exchange != null)
                requestOptions.PathParameters.Add("exchange", Thinkcode.RabbitMQ.OpenAPI.Client.ClientUtils.ParameterToString(exchange)); // path parameter
            if (queue != null)
                requestOptions.PathParameters.Add("queue", Thinkcode.RabbitMQ.OpenAPI.Client.ClientUtils.ParameterToString(queue)); // path parameter
            if (propertyKey != null)
                requestOptions.PathParameters.Add("propertyKey", Thinkcode.RabbitMQ.OpenAPI.Client.ClientUtils.ParameterToString(propertyKey)); // path parameter

            // authentication (basic_auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Basic " + Thinkcode.RabbitMQ.OpenAPI.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request

            var response = this.Client.Delete<Object>("/bindings/{vhost}/e/{exchange}/q/{queue}/{propertyKey}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("DeleteBindingForQueueExchange", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Delete Binding for Queue 
        /// </summary>
        /// <exception cref="Thinkcode.RabbitMQ.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vhost"></param>
        /// <param name="exchange"></param>
        /// <param name="queue"></param>
        /// <param name="propertyKey"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteBindingForQueueExchangeAsync (string vhost, string exchange, string queue, string propertyKey)
        {
             await DeleteBindingForQueueExchangeAsyncWithHttpInfo(vhost, exchange, queue, propertyKey);

        }

        /// <summary>
        /// Delete Binding for Queue 
        /// </summary>
        /// <exception cref="Thinkcode.RabbitMQ.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vhost"></param>
        /// <param name="exchange"></param>
        /// <param name="queue"></param>
        /// <param name="propertyKey"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Thinkcode.RabbitMQ.OpenAPI.Client.ApiResponse<Object>> DeleteBindingForQueueExchangeAsyncWithHttpInfo (string vhost, string exchange, string queue, string propertyKey)
        {
            // verify the required parameter 'vhost' is set
            if (vhost == null)
                throw new Thinkcode.RabbitMQ.OpenAPI.Client.ApiException(400, "Missing required parameter 'vhost' when calling BindingsApi->DeleteBindingForQueueExchange");

            // verify the required parameter 'exchange' is set
            if (exchange == null)
                throw new Thinkcode.RabbitMQ.OpenAPI.Client.ApiException(400, "Missing required parameter 'exchange' when calling BindingsApi->DeleteBindingForQueueExchange");

            // verify the required parameter 'queue' is set
            if (queue == null)
                throw new Thinkcode.RabbitMQ.OpenAPI.Client.ApiException(400, "Missing required parameter 'queue' when calling BindingsApi->DeleteBindingForQueueExchange");

            // verify the required parameter 'propertyKey' is set
            if (propertyKey == null)
                throw new Thinkcode.RabbitMQ.OpenAPI.Client.ApiException(400, "Missing required parameter 'propertyKey' when calling BindingsApi->DeleteBindingForQueueExchange");


            Thinkcode.RabbitMQ.OpenAPI.Client.RequestOptions requestOptions = new Thinkcode.RabbitMQ.OpenAPI.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (vhost != null)
                requestOptions.PathParameters.Add("vhost", Thinkcode.RabbitMQ.OpenAPI.Client.ClientUtils.ParameterToString(vhost)); // path parameter
            if (exchange != null)
                requestOptions.PathParameters.Add("exchange", Thinkcode.RabbitMQ.OpenAPI.Client.ClientUtils.ParameterToString(exchange)); // path parameter
            if (queue != null)
                requestOptions.PathParameters.Add("queue", Thinkcode.RabbitMQ.OpenAPI.Client.ClientUtils.ParameterToString(queue)); // path parameter
            if (propertyKey != null)
                requestOptions.PathParameters.Add("propertyKey", Thinkcode.RabbitMQ.OpenAPI.Client.ClientUtils.ParameterToString(propertyKey)); // path parameter

            // authentication (basic_auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Basic " + Thinkcode.RabbitMQ.OpenAPI.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.DeleteAsync<Object>("/bindings/{vhost}/e/{exchange}/q/{queue}/{propertyKey}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("DeleteBindingForQueueExchange", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Get Binding for Queue 
        /// </summary>
        /// <exception cref="Thinkcode.RabbitMQ.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vhost"></param>
        /// <param name="exchange"></param>
        /// <param name="queue"></param>
        /// <param name="propertyKey"></param>
        /// <returns>Binding</returns>
        public Binding GetBindingForQueueExchange (string vhost, string exchange, string queue, string propertyKey)
        {
             Thinkcode.RabbitMQ.OpenAPI.Client.ApiResponse<Binding> localVarResponse = GetBindingForQueueExchangeWithHttpInfo(vhost, exchange, queue, propertyKey);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Binding for Queue 
        /// </summary>
        /// <exception cref="Thinkcode.RabbitMQ.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vhost"></param>
        /// <param name="exchange"></param>
        /// <param name="queue"></param>
        /// <param name="propertyKey"></param>
        /// <returns>ApiResponse of Binding</returns>
        public Thinkcode.RabbitMQ.OpenAPI.Client.ApiResponse< Binding > GetBindingForQueueExchangeWithHttpInfo (string vhost, string exchange, string queue, string propertyKey)
        {
            // verify the required parameter 'vhost' is set
            if (vhost == null)
                throw new Thinkcode.RabbitMQ.OpenAPI.Client.ApiException(400, "Missing required parameter 'vhost' when calling BindingsApi->GetBindingForQueueExchange");

            // verify the required parameter 'exchange' is set
            if (exchange == null)
                throw new Thinkcode.RabbitMQ.OpenAPI.Client.ApiException(400, "Missing required parameter 'exchange' when calling BindingsApi->GetBindingForQueueExchange");

            // verify the required parameter 'queue' is set
            if (queue == null)
                throw new Thinkcode.RabbitMQ.OpenAPI.Client.ApiException(400, "Missing required parameter 'queue' when calling BindingsApi->GetBindingForQueueExchange");

            // verify the required parameter 'propertyKey' is set
            if (propertyKey == null)
                throw new Thinkcode.RabbitMQ.OpenAPI.Client.ApiException(400, "Missing required parameter 'propertyKey' when calling BindingsApi->GetBindingForQueueExchange");

            Thinkcode.RabbitMQ.OpenAPI.Client.RequestOptions requestOptions = new Thinkcode.RabbitMQ.OpenAPI.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Thinkcode.RabbitMQ.OpenAPI.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Thinkcode.RabbitMQ.OpenAPI.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (vhost != null)
                requestOptions.PathParameters.Add("vhost", Thinkcode.RabbitMQ.OpenAPI.Client.ClientUtils.ParameterToString(vhost)); // path parameter
            if (exchange != null)
                requestOptions.PathParameters.Add("exchange", Thinkcode.RabbitMQ.OpenAPI.Client.ClientUtils.ParameterToString(exchange)); // path parameter
            if (queue != null)
                requestOptions.PathParameters.Add("queue", Thinkcode.RabbitMQ.OpenAPI.Client.ClientUtils.ParameterToString(queue)); // path parameter
            if (propertyKey != null)
                requestOptions.PathParameters.Add("propertyKey", Thinkcode.RabbitMQ.OpenAPI.Client.ClientUtils.ParameterToString(propertyKey)); // path parameter

            // authentication (basic_auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Basic " + Thinkcode.RabbitMQ.OpenAPI.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request

            var response = this.Client.Get< Binding >("/bindings/{vhost}/e/{exchange}/q/{queue}/{propertyKey}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetBindingForQueueExchange", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Get Binding for Queue 
        /// </summary>
        /// <exception cref="Thinkcode.RabbitMQ.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vhost"></param>
        /// <param name="exchange"></param>
        /// <param name="queue"></param>
        /// <param name="propertyKey"></param>
        /// <returns>Task of Binding</returns>
        public async System.Threading.Tasks.Task<Binding> GetBindingForQueueExchangeAsync (string vhost, string exchange, string queue, string propertyKey)
        {
             Thinkcode.RabbitMQ.OpenAPI.Client.ApiResponse<Binding> localVarResponse = await GetBindingForQueueExchangeAsyncWithHttpInfo(vhost, exchange, queue, propertyKey);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Binding for Queue 
        /// </summary>
        /// <exception cref="Thinkcode.RabbitMQ.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vhost"></param>
        /// <param name="exchange"></param>
        /// <param name="queue"></param>
        /// <param name="propertyKey"></param>
        /// <returns>Task of ApiResponse (Binding)</returns>
        public async System.Threading.Tasks.Task<Thinkcode.RabbitMQ.OpenAPI.Client.ApiResponse<Binding>> GetBindingForQueueExchangeAsyncWithHttpInfo (string vhost, string exchange, string queue, string propertyKey)
        {
            // verify the required parameter 'vhost' is set
            if (vhost == null)
                throw new Thinkcode.RabbitMQ.OpenAPI.Client.ApiException(400, "Missing required parameter 'vhost' when calling BindingsApi->GetBindingForQueueExchange");

            // verify the required parameter 'exchange' is set
            if (exchange == null)
                throw new Thinkcode.RabbitMQ.OpenAPI.Client.ApiException(400, "Missing required parameter 'exchange' when calling BindingsApi->GetBindingForQueueExchange");

            // verify the required parameter 'queue' is set
            if (queue == null)
                throw new Thinkcode.RabbitMQ.OpenAPI.Client.ApiException(400, "Missing required parameter 'queue' when calling BindingsApi->GetBindingForQueueExchange");

            // verify the required parameter 'propertyKey' is set
            if (propertyKey == null)
                throw new Thinkcode.RabbitMQ.OpenAPI.Client.ApiException(400, "Missing required parameter 'propertyKey' when calling BindingsApi->GetBindingForQueueExchange");


            Thinkcode.RabbitMQ.OpenAPI.Client.RequestOptions requestOptions = new Thinkcode.RabbitMQ.OpenAPI.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (vhost != null)
                requestOptions.PathParameters.Add("vhost", Thinkcode.RabbitMQ.OpenAPI.Client.ClientUtils.ParameterToString(vhost)); // path parameter
            if (exchange != null)
                requestOptions.PathParameters.Add("exchange", Thinkcode.RabbitMQ.OpenAPI.Client.ClientUtils.ParameterToString(exchange)); // path parameter
            if (queue != null)
                requestOptions.PathParameters.Add("queue", Thinkcode.RabbitMQ.OpenAPI.Client.ClientUtils.ParameterToString(queue)); // path parameter
            if (propertyKey != null)
                requestOptions.PathParameters.Add("propertyKey", Thinkcode.RabbitMQ.OpenAPI.Client.ClientUtils.ParameterToString(propertyKey)); // path parameter

            // authentication (basic_auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Basic " + Thinkcode.RabbitMQ.OpenAPI.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<Binding>("/bindings/{vhost}/e/{exchange}/q/{queue}/{propertyKey}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetBindingForQueueExchange", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// List Bindings 
        /// </summary>
        /// <exception cref="Thinkcode.RabbitMQ.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ICollection&lt;Binding&gt;</returns>
        public ICollection<Binding> ListBindings ()
        {
             Thinkcode.RabbitMQ.OpenAPI.Client.ApiResponse<ICollection<Binding>> localVarResponse = ListBindingsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// List Bindings 
        /// </summary>
        /// <exception cref="Thinkcode.RabbitMQ.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ICollection&lt;Binding&gt;</returns>
        public Thinkcode.RabbitMQ.OpenAPI.Client.ApiResponse< ICollection<Binding> > ListBindingsWithHttpInfo ()
        {
            Thinkcode.RabbitMQ.OpenAPI.Client.RequestOptions requestOptions = new Thinkcode.RabbitMQ.OpenAPI.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Thinkcode.RabbitMQ.OpenAPI.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Thinkcode.RabbitMQ.OpenAPI.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (basic_auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Basic " + Thinkcode.RabbitMQ.OpenAPI.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request

            var response = this.Client.Get< ICollection<Binding> >("/bindings", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ListBindings", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// List Bindings 
        /// </summary>
        /// <exception cref="Thinkcode.RabbitMQ.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ICollection&lt;Binding&gt;</returns>
        public async System.Threading.Tasks.Task<ICollection<Binding>> ListBindingsAsync ()
        {
             Thinkcode.RabbitMQ.OpenAPI.Client.ApiResponse<ICollection<Binding>> localVarResponse = await ListBindingsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// List Bindings 
        /// </summary>
        /// <exception cref="Thinkcode.RabbitMQ.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (ICollection&lt;Binding&gt;)</returns>
        public async System.Threading.Tasks.Task<Thinkcode.RabbitMQ.OpenAPI.Client.ApiResponse<ICollection<Binding>>> ListBindingsAsyncWithHttpInfo ()
        {

            Thinkcode.RabbitMQ.OpenAPI.Client.RequestOptions requestOptions = new Thinkcode.RabbitMQ.OpenAPI.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            

            // authentication (basic_auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Basic " + Thinkcode.RabbitMQ.OpenAPI.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<ICollection<Binding>>("/bindings", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ListBindings", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// List Bindings as Destination 
        /// </summary>
        /// <exception cref="Thinkcode.RabbitMQ.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vhost"></param>
        /// <param name="exchange"></param>
        /// <returns>ICollection&lt;Binding&gt;</returns>
        public ICollection<Binding> ListBindingsAsDestination (string vhost, string exchange)
        {
             Thinkcode.RabbitMQ.OpenAPI.Client.ApiResponse<ICollection<Binding>> localVarResponse = ListBindingsAsDestinationWithHttpInfo(vhost, exchange);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List Bindings as Destination 
        /// </summary>
        /// <exception cref="Thinkcode.RabbitMQ.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vhost"></param>
        /// <param name="exchange"></param>
        /// <returns>ApiResponse of ICollection&lt;Binding&gt;</returns>
        public Thinkcode.RabbitMQ.OpenAPI.Client.ApiResponse< ICollection<Binding> > ListBindingsAsDestinationWithHttpInfo (string vhost, string exchange)
        {
            // verify the required parameter 'vhost' is set
            if (vhost == null)
                throw new Thinkcode.RabbitMQ.OpenAPI.Client.ApiException(400, "Missing required parameter 'vhost' when calling BindingsApi->ListBindingsAsDestination");

            // verify the required parameter 'exchange' is set
            if (exchange == null)
                throw new Thinkcode.RabbitMQ.OpenAPI.Client.ApiException(400, "Missing required parameter 'exchange' when calling BindingsApi->ListBindingsAsDestination");

            Thinkcode.RabbitMQ.OpenAPI.Client.RequestOptions requestOptions = new Thinkcode.RabbitMQ.OpenAPI.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Thinkcode.RabbitMQ.OpenAPI.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Thinkcode.RabbitMQ.OpenAPI.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (vhost != null)
                requestOptions.PathParameters.Add("vhost", Thinkcode.RabbitMQ.OpenAPI.Client.ClientUtils.ParameterToString(vhost)); // path parameter
            if (exchange != null)
                requestOptions.PathParameters.Add("exchange", Thinkcode.RabbitMQ.OpenAPI.Client.ClientUtils.ParameterToString(exchange)); // path parameter

            // authentication (basic_auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Basic " + Thinkcode.RabbitMQ.OpenAPI.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request

            var response = this.Client.Get< ICollection<Binding> >("/exchanges/{vhost}/{exchange}/bindings/destination", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ListBindingsAsDestination", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// List Bindings as Destination 
        /// </summary>
        /// <exception cref="Thinkcode.RabbitMQ.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vhost"></param>
        /// <param name="exchange"></param>
        /// <returns>Task of ICollection&lt;Binding&gt;</returns>
        public async System.Threading.Tasks.Task<ICollection<Binding>> ListBindingsAsDestinationAsync (string vhost, string exchange)
        {
             Thinkcode.RabbitMQ.OpenAPI.Client.ApiResponse<ICollection<Binding>> localVarResponse = await ListBindingsAsDestinationAsyncWithHttpInfo(vhost, exchange);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List Bindings as Destination 
        /// </summary>
        /// <exception cref="Thinkcode.RabbitMQ.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vhost"></param>
        /// <param name="exchange"></param>
        /// <returns>Task of ApiResponse (ICollection&lt;Binding&gt;)</returns>
        public async System.Threading.Tasks.Task<Thinkcode.RabbitMQ.OpenAPI.Client.ApiResponse<ICollection<Binding>>> ListBindingsAsDestinationAsyncWithHttpInfo (string vhost, string exchange)
        {
            // verify the required parameter 'vhost' is set
            if (vhost == null)
                throw new Thinkcode.RabbitMQ.OpenAPI.Client.ApiException(400, "Missing required parameter 'vhost' when calling BindingsApi->ListBindingsAsDestination");

            // verify the required parameter 'exchange' is set
            if (exchange == null)
                throw new Thinkcode.RabbitMQ.OpenAPI.Client.ApiException(400, "Missing required parameter 'exchange' when calling BindingsApi->ListBindingsAsDestination");


            Thinkcode.RabbitMQ.OpenAPI.Client.RequestOptions requestOptions = new Thinkcode.RabbitMQ.OpenAPI.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (vhost != null)
                requestOptions.PathParameters.Add("vhost", Thinkcode.RabbitMQ.OpenAPI.Client.ClientUtils.ParameterToString(vhost)); // path parameter
            if (exchange != null)
                requestOptions.PathParameters.Add("exchange", Thinkcode.RabbitMQ.OpenAPI.Client.ClientUtils.ParameterToString(exchange)); // path parameter

            // authentication (basic_auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Basic " + Thinkcode.RabbitMQ.OpenAPI.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<ICollection<Binding>>("/exchanges/{vhost}/{exchange}/bindings/destination", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ListBindingsAsDestination", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// List Bindings as Source 
        /// </summary>
        /// <exception cref="Thinkcode.RabbitMQ.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vhost"></param>
        /// <param name="exchange"></param>
        /// <returns>ICollection&lt;Binding&gt;</returns>
        public ICollection<Binding> ListBindingsAsSource (string vhost, string exchange)
        {
             Thinkcode.RabbitMQ.OpenAPI.Client.ApiResponse<ICollection<Binding>> localVarResponse = ListBindingsAsSourceWithHttpInfo(vhost, exchange);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List Bindings as Source 
        /// </summary>
        /// <exception cref="Thinkcode.RabbitMQ.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vhost"></param>
        /// <param name="exchange"></param>
        /// <returns>ApiResponse of ICollection&lt;Binding&gt;</returns>
        public Thinkcode.RabbitMQ.OpenAPI.Client.ApiResponse< ICollection<Binding> > ListBindingsAsSourceWithHttpInfo (string vhost, string exchange)
        {
            // verify the required parameter 'vhost' is set
            if (vhost == null)
                throw new Thinkcode.RabbitMQ.OpenAPI.Client.ApiException(400, "Missing required parameter 'vhost' when calling BindingsApi->ListBindingsAsSource");

            // verify the required parameter 'exchange' is set
            if (exchange == null)
                throw new Thinkcode.RabbitMQ.OpenAPI.Client.ApiException(400, "Missing required parameter 'exchange' when calling BindingsApi->ListBindingsAsSource");

            Thinkcode.RabbitMQ.OpenAPI.Client.RequestOptions requestOptions = new Thinkcode.RabbitMQ.OpenAPI.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Thinkcode.RabbitMQ.OpenAPI.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Thinkcode.RabbitMQ.OpenAPI.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (vhost != null)
                requestOptions.PathParameters.Add("vhost", Thinkcode.RabbitMQ.OpenAPI.Client.ClientUtils.ParameterToString(vhost)); // path parameter
            if (exchange != null)
                requestOptions.PathParameters.Add("exchange", Thinkcode.RabbitMQ.OpenAPI.Client.ClientUtils.ParameterToString(exchange)); // path parameter

            // authentication (basic_auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Basic " + Thinkcode.RabbitMQ.OpenAPI.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request

            var response = this.Client.Get< ICollection<Binding> >("/exchanges/{vhost}/{exchange}/bindings/source", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ListBindingsAsSource", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// List Bindings as Source 
        /// </summary>
        /// <exception cref="Thinkcode.RabbitMQ.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vhost"></param>
        /// <param name="exchange"></param>
        /// <returns>Task of ICollection&lt;Binding&gt;</returns>
        public async System.Threading.Tasks.Task<ICollection<Binding>> ListBindingsAsSourceAsync (string vhost, string exchange)
        {
             Thinkcode.RabbitMQ.OpenAPI.Client.ApiResponse<ICollection<Binding>> localVarResponse = await ListBindingsAsSourceAsyncWithHttpInfo(vhost, exchange);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List Bindings as Source 
        /// </summary>
        /// <exception cref="Thinkcode.RabbitMQ.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vhost"></param>
        /// <param name="exchange"></param>
        /// <returns>Task of ApiResponse (ICollection&lt;Binding&gt;)</returns>
        public async System.Threading.Tasks.Task<Thinkcode.RabbitMQ.OpenAPI.Client.ApiResponse<ICollection<Binding>>> ListBindingsAsSourceAsyncWithHttpInfo (string vhost, string exchange)
        {
            // verify the required parameter 'vhost' is set
            if (vhost == null)
                throw new Thinkcode.RabbitMQ.OpenAPI.Client.ApiException(400, "Missing required parameter 'vhost' when calling BindingsApi->ListBindingsAsSource");

            // verify the required parameter 'exchange' is set
            if (exchange == null)
                throw new Thinkcode.RabbitMQ.OpenAPI.Client.ApiException(400, "Missing required parameter 'exchange' when calling BindingsApi->ListBindingsAsSource");


            Thinkcode.RabbitMQ.OpenAPI.Client.RequestOptions requestOptions = new Thinkcode.RabbitMQ.OpenAPI.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (vhost != null)
                requestOptions.PathParameters.Add("vhost", Thinkcode.RabbitMQ.OpenAPI.Client.ClientUtils.ParameterToString(vhost)); // path parameter
            if (exchange != null)
                requestOptions.PathParameters.Add("exchange", Thinkcode.RabbitMQ.OpenAPI.Client.ClientUtils.ParameterToString(exchange)); // path parameter

            // authentication (basic_auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Basic " + Thinkcode.RabbitMQ.OpenAPI.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<ICollection<Binding>>("/exchanges/{vhost}/{exchange}/bindings/source", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ListBindingsAsSource", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// List All Bindings for Queue 
        /// </summary>
        /// <exception cref="Thinkcode.RabbitMQ.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vhost"></param>
        /// <param name="queue"></param>
        /// <returns>ICollection&lt;Binding&gt;</returns>
        public ICollection<Binding> ListBindingsForQueue (string vhost, string queue)
        {
             Thinkcode.RabbitMQ.OpenAPI.Client.ApiResponse<ICollection<Binding>> localVarResponse = ListBindingsForQueueWithHttpInfo(vhost, queue);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List All Bindings for Queue 
        /// </summary>
        /// <exception cref="Thinkcode.RabbitMQ.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vhost"></param>
        /// <param name="queue"></param>
        /// <returns>ApiResponse of ICollection&lt;Binding&gt;</returns>
        public Thinkcode.RabbitMQ.OpenAPI.Client.ApiResponse< ICollection<Binding> > ListBindingsForQueueWithHttpInfo (string vhost, string queue)
        {
            // verify the required parameter 'vhost' is set
            if (vhost == null)
                throw new Thinkcode.RabbitMQ.OpenAPI.Client.ApiException(400, "Missing required parameter 'vhost' when calling BindingsApi->ListBindingsForQueue");

            // verify the required parameter 'queue' is set
            if (queue == null)
                throw new Thinkcode.RabbitMQ.OpenAPI.Client.ApiException(400, "Missing required parameter 'queue' when calling BindingsApi->ListBindingsForQueue");

            Thinkcode.RabbitMQ.OpenAPI.Client.RequestOptions requestOptions = new Thinkcode.RabbitMQ.OpenAPI.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Thinkcode.RabbitMQ.OpenAPI.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Thinkcode.RabbitMQ.OpenAPI.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (vhost != null)
                requestOptions.PathParameters.Add("vhost", Thinkcode.RabbitMQ.OpenAPI.Client.ClientUtils.ParameterToString(vhost)); // path parameter
            if (queue != null)
                requestOptions.PathParameters.Add("queue", Thinkcode.RabbitMQ.OpenAPI.Client.ClientUtils.ParameterToString(queue)); // path parameter

            // authentication (basic_auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Basic " + Thinkcode.RabbitMQ.OpenAPI.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request

            var response = this.Client.Get< ICollection<Binding> >("/queues/{vhost}/{queue}/bindings", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ListBindingsForQueue", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// List All Bindings for Queue 
        /// </summary>
        /// <exception cref="Thinkcode.RabbitMQ.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vhost"></param>
        /// <param name="queue"></param>
        /// <returns>Task of ICollection&lt;Binding&gt;</returns>
        public async System.Threading.Tasks.Task<ICollection<Binding>> ListBindingsForQueueAsync (string vhost, string queue)
        {
             Thinkcode.RabbitMQ.OpenAPI.Client.ApiResponse<ICollection<Binding>> localVarResponse = await ListBindingsForQueueAsyncWithHttpInfo(vhost, queue);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List All Bindings for Queue 
        /// </summary>
        /// <exception cref="Thinkcode.RabbitMQ.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vhost"></param>
        /// <param name="queue"></param>
        /// <returns>Task of ApiResponse (ICollection&lt;Binding&gt;)</returns>
        public async System.Threading.Tasks.Task<Thinkcode.RabbitMQ.OpenAPI.Client.ApiResponse<ICollection<Binding>>> ListBindingsForQueueAsyncWithHttpInfo (string vhost, string queue)
        {
            // verify the required parameter 'vhost' is set
            if (vhost == null)
                throw new Thinkcode.RabbitMQ.OpenAPI.Client.ApiException(400, "Missing required parameter 'vhost' when calling BindingsApi->ListBindingsForQueue");

            // verify the required parameter 'queue' is set
            if (queue == null)
                throw new Thinkcode.RabbitMQ.OpenAPI.Client.ApiException(400, "Missing required parameter 'queue' when calling BindingsApi->ListBindingsForQueue");


            Thinkcode.RabbitMQ.OpenAPI.Client.RequestOptions requestOptions = new Thinkcode.RabbitMQ.OpenAPI.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (vhost != null)
                requestOptions.PathParameters.Add("vhost", Thinkcode.RabbitMQ.OpenAPI.Client.ClientUtils.ParameterToString(vhost)); // path parameter
            if (queue != null)
                requestOptions.PathParameters.Add("queue", Thinkcode.RabbitMQ.OpenAPI.Client.ClientUtils.ParameterToString(queue)); // path parameter

            // authentication (basic_auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Basic " + Thinkcode.RabbitMQ.OpenAPI.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<ICollection<Binding>>("/queues/{vhost}/{queue}/bindings", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ListBindingsForQueue", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// List Bindings for Queue 
        /// </summary>
        /// <exception cref="Thinkcode.RabbitMQ.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vhost"></param>
        /// <param name="exchange"></param>
        /// <param name="queue"></param>
        /// <returns>ICollection&lt;Binding&gt;</returns>
        public ICollection<Binding> ListBindingsForQueueExchange (string vhost, string exchange, string queue)
        {
             Thinkcode.RabbitMQ.OpenAPI.Client.ApiResponse<ICollection<Binding>> localVarResponse = ListBindingsForQueueExchangeWithHttpInfo(vhost, exchange, queue);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List Bindings for Queue 
        /// </summary>
        /// <exception cref="Thinkcode.RabbitMQ.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vhost"></param>
        /// <param name="exchange"></param>
        /// <param name="queue"></param>
        /// <returns>ApiResponse of ICollection&lt;Binding&gt;</returns>
        public Thinkcode.RabbitMQ.OpenAPI.Client.ApiResponse< ICollection<Binding> > ListBindingsForQueueExchangeWithHttpInfo (string vhost, string exchange, string queue)
        {
            // verify the required parameter 'vhost' is set
            if (vhost == null)
                throw new Thinkcode.RabbitMQ.OpenAPI.Client.ApiException(400, "Missing required parameter 'vhost' when calling BindingsApi->ListBindingsForQueueExchange");

            // verify the required parameter 'exchange' is set
            if (exchange == null)
                throw new Thinkcode.RabbitMQ.OpenAPI.Client.ApiException(400, "Missing required parameter 'exchange' when calling BindingsApi->ListBindingsForQueueExchange");

            // verify the required parameter 'queue' is set
            if (queue == null)
                throw new Thinkcode.RabbitMQ.OpenAPI.Client.ApiException(400, "Missing required parameter 'queue' when calling BindingsApi->ListBindingsForQueueExchange");

            Thinkcode.RabbitMQ.OpenAPI.Client.RequestOptions requestOptions = new Thinkcode.RabbitMQ.OpenAPI.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Thinkcode.RabbitMQ.OpenAPI.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Thinkcode.RabbitMQ.OpenAPI.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (vhost != null)
                requestOptions.PathParameters.Add("vhost", Thinkcode.RabbitMQ.OpenAPI.Client.ClientUtils.ParameterToString(vhost)); // path parameter
            if (exchange != null)
                requestOptions.PathParameters.Add("exchange", Thinkcode.RabbitMQ.OpenAPI.Client.ClientUtils.ParameterToString(exchange)); // path parameter
            if (queue != null)
                requestOptions.PathParameters.Add("queue", Thinkcode.RabbitMQ.OpenAPI.Client.ClientUtils.ParameterToString(queue)); // path parameter

            // authentication (basic_auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Basic " + Thinkcode.RabbitMQ.OpenAPI.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request

            var response = this.Client.Get< ICollection<Binding> >("/bindings/{vhost}/e/{exchange}/q/{queue}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ListBindingsForQueueExchange", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// List Bindings for Queue 
        /// </summary>
        /// <exception cref="Thinkcode.RabbitMQ.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vhost"></param>
        /// <param name="exchange"></param>
        /// <param name="queue"></param>
        /// <returns>Task of ICollection&lt;Binding&gt;</returns>
        public async System.Threading.Tasks.Task<ICollection<Binding>> ListBindingsForQueueExchangeAsync (string vhost, string exchange, string queue)
        {
             Thinkcode.RabbitMQ.OpenAPI.Client.ApiResponse<ICollection<Binding>> localVarResponse = await ListBindingsForQueueExchangeAsyncWithHttpInfo(vhost, exchange, queue);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List Bindings for Queue 
        /// </summary>
        /// <exception cref="Thinkcode.RabbitMQ.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vhost"></param>
        /// <param name="exchange"></param>
        /// <param name="queue"></param>
        /// <returns>Task of ApiResponse (ICollection&lt;Binding&gt;)</returns>
        public async System.Threading.Tasks.Task<Thinkcode.RabbitMQ.OpenAPI.Client.ApiResponse<ICollection<Binding>>> ListBindingsForQueueExchangeAsyncWithHttpInfo (string vhost, string exchange, string queue)
        {
            // verify the required parameter 'vhost' is set
            if (vhost == null)
                throw new Thinkcode.RabbitMQ.OpenAPI.Client.ApiException(400, "Missing required parameter 'vhost' when calling BindingsApi->ListBindingsForQueueExchange");

            // verify the required parameter 'exchange' is set
            if (exchange == null)
                throw new Thinkcode.RabbitMQ.OpenAPI.Client.ApiException(400, "Missing required parameter 'exchange' when calling BindingsApi->ListBindingsForQueueExchange");

            // verify the required parameter 'queue' is set
            if (queue == null)
                throw new Thinkcode.RabbitMQ.OpenAPI.Client.ApiException(400, "Missing required parameter 'queue' when calling BindingsApi->ListBindingsForQueueExchange");


            Thinkcode.RabbitMQ.OpenAPI.Client.RequestOptions requestOptions = new Thinkcode.RabbitMQ.OpenAPI.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (vhost != null)
                requestOptions.PathParameters.Add("vhost", Thinkcode.RabbitMQ.OpenAPI.Client.ClientUtils.ParameterToString(vhost)); // path parameter
            if (exchange != null)
                requestOptions.PathParameters.Add("exchange", Thinkcode.RabbitMQ.OpenAPI.Client.ClientUtils.ParameterToString(exchange)); // path parameter
            if (queue != null)
                requestOptions.PathParameters.Add("queue", Thinkcode.RabbitMQ.OpenAPI.Client.ClientUtils.ParameterToString(queue)); // path parameter

            // authentication (basic_auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Basic " + Thinkcode.RabbitMQ.OpenAPI.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<ICollection<Binding>>("/bindings/{vhost}/e/{exchange}/q/{queue}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ListBindingsForQueueExchange", response);
                if (exception != null) throw exception;
            }

            return response;
        }

    }
}
