/* 
 * Rabbitmq Http API
 *
 * This is the OpenAPI specification of the RabbitMQ HTTP API. For more information, please refer to [HTTP API](https://cdn.rawgit.com/rabbitmq/rabbitmq-management/v3.7.14/priv/www/api/index.html) official documentation.
 *
 * OpenAPI spec version: 1.0
 * Contact: carlos@adaptive.me
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Thinkcode.RabbitMQ.OpenAPI.Client.OpenAPIDateConverter;

namespace Thinkcode.RabbitMQ.OpenAPI.Model
{
    /// <summary>
    /// PermissionUser
    /// </summary>
    [DataContract]
    public partial class PermissionUser :  IEquatable<PermissionUser>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PermissionUser" /> class.
        /// </summary>
        /// <param name="configure">configure.</param>
        /// <param name="read">read.</param>
        /// <param name="user">user.</param>
        /// <param name="vhost">vhost.</param>
        /// <param name="write">write.</param>
        public PermissionUser(string configure = default(string), string read = default(string), string user = default(string), string vhost = default(string), string write = default(string))
        {
            this.Configure = configure;
            this.Read = read;
            this.User = user;
            this.Vhost = vhost;
            this.Write = write;
        }
        
        /// <summary>
        /// Gets or Sets Configure
        /// </summary>
        [DataMember(Name="configure", EmitDefaultValue=false)]
        public string Configure { get; set; }

        /// <summary>
        /// Gets or Sets Read
        /// </summary>
        [DataMember(Name="read", EmitDefaultValue=false)]
        public string Read { get; set; }

        /// <summary>
        /// Gets or Sets User
        /// </summary>
        [DataMember(Name="user", EmitDefaultValue=false)]
        public string User { get; set; }

        /// <summary>
        /// Gets or Sets Vhost
        /// </summary>
        [DataMember(Name="vhost", EmitDefaultValue=false)]
        public string Vhost { get; set; }

        /// <summary>
        /// Gets or Sets Write
        /// </summary>
        [DataMember(Name="write", EmitDefaultValue=false)]
        public string Write { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PermissionUser {\n");
            sb.Append("  Configure: ").Append(Configure).Append("\n");
            sb.Append("  Read: ").Append(Read).Append("\n");
            sb.Append("  User: ").Append(User).Append("\n");
            sb.Append("  Vhost: ").Append(Vhost).Append("\n");
            sb.Append("  Write: ").Append(Write).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PermissionUser);
        }

        /// <summary>
        /// Returns true if PermissionUser instances are equal
        /// </summary>
        /// <param name="input">Instance of PermissionUser to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PermissionUser input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Configure == input.Configure ||
                    (this.Configure != null &&
                    this.Configure.Equals(input.Configure))
                ) && 
                (
                    this.Read == input.Read ||
                    (this.Read != null &&
                    this.Read.Equals(input.Read))
                ) && 
                (
                    this.User == input.User ||
                    (this.User != null &&
                    this.User.Equals(input.User))
                ) && 
                (
                    this.Vhost == input.Vhost ||
                    (this.Vhost != null &&
                    this.Vhost.Equals(input.Vhost))
                ) && 
                (
                    this.Write == input.Write ||
                    (this.Write != null &&
                    this.Write.Equals(input.Write))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Configure != null)
                    hashCode = hashCode * 59 + this.Configure.GetHashCode();
                if (this.Read != null)
                    hashCode = hashCode * 59 + this.Read.GetHashCode();
                if (this.User != null)
                    hashCode = hashCode * 59 + this.User.GetHashCode();
                if (this.Vhost != null)
                    hashCode = hashCode * 59 + this.Vhost.GetHashCode();
                if (this.Write != null)
                    hashCode = hashCode * 59 + this.Write.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
