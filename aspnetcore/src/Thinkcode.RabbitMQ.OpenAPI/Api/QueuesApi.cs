/* 
 * Rabbitmq Http API
 *
 * This is the OpenAPI specification of the RabbitMQ HTTP API. For more information, please refer to [HTTP API](https://cdn.rawgit.com/rabbitmq/rabbitmq-management/v3.7.14/priv/www/api/index.html) official documentation.
 *
 * OpenAPI spec version: 1.0
 * Contact: carlos@adaptive.me
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Thinkcode.RabbitMQ.OpenAPI.Client;
using Thinkcode.RabbitMQ.OpenAPI.Model;

namespace Thinkcode.RabbitMQ.OpenAPI.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IQueuesApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Consume Message
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Thinkcode.RabbitMQ.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vhost"></param>
        /// <param name="queue"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ICollection&lt;ConsumeResponse&gt;</returns>
        ICollection<ConsumeResponse> ConsumeMessage (string vhost, string queue, ConsumeRequest body = null);

        /// <summary>
        /// Consume Message
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Thinkcode.RabbitMQ.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vhost"></param>
        /// <param name="queue"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ICollection&lt;ConsumeResponse&gt;</returns>
        ApiResponse<ICollection<ConsumeResponse>> ConsumeMessageWithHttpInfo (string vhost, string queue, ConsumeRequest body = null);
        /// <summary>
        /// Create Queue
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Thinkcode.RabbitMQ.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vhost"></param>
        /// <param name="queue"></param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        void CreateQueue (string vhost, string queue, QueueRequest body = null);

        /// <summary>
        /// Create Queue
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Thinkcode.RabbitMQ.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vhost"></param>
        /// <param name="queue"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CreateQueueWithHttpInfo (string vhost, string queue, QueueRequest body = null);
        /// <summary>
        /// Create Actions for Queue
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Thinkcode.RabbitMQ.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vhost"></param>
        /// <param name="queue"></param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        void CreateQueueActions (string vhost, string queue, QueueAction body = null);

        /// <summary>
        /// Create Actions for Queue
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Thinkcode.RabbitMQ.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vhost"></param>
        /// <param name="queue"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CreateQueueActionsWithHttpInfo (string vhost, string queue, QueueAction body = null);
        /// <summary>
        /// Delete Queue
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Thinkcode.RabbitMQ.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vhost"></param>
        /// <param name="queue"></param>
        /// <param name="ifEmpty"> (optional, default to true)</param>
        /// <param name="ifUnused"> (optional, default to true)</param>
        /// <returns></returns>
        void DeleteQueue (string vhost, string queue, bool? ifEmpty = null, bool? ifUnused = null);

        /// <summary>
        /// Delete Queue
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Thinkcode.RabbitMQ.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vhost"></param>
        /// <param name="queue"></param>
        /// <param name="ifEmpty"> (optional, default to true)</param>
        /// <param name="ifUnused"> (optional, default to true)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteQueueWithHttpInfo (string vhost, string queue, bool? ifEmpty = null, bool? ifUnused = null);
        /// <summary>
        /// Delete Queue Contents (Purge)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Thinkcode.RabbitMQ.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vhost"></param>
        /// <param name="queue"></param>
        /// <returns></returns>
        void DeleteQueueContents (string vhost, string queue);

        /// <summary>
        /// Delete Queue Contents (Purge)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Thinkcode.RabbitMQ.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vhost"></param>
        /// <param name="queue"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteQueueContentsWithHttpInfo (string vhost, string queue);
        /// <summary>
        /// Get Queue
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Thinkcode.RabbitMQ.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vhost"></param>
        /// <param name="queue"></param>
        /// <returns>Queue</returns>
        Queue GetQueue (string vhost, string queue);

        /// <summary>
        /// Get Queue
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Thinkcode.RabbitMQ.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vhost"></param>
        /// <param name="queue"></param>
        /// <returns>ApiResponse of Queue</returns>
        ApiResponse<Queue> GetQueueWithHttpInfo (string vhost, string queue);
        /// <summary>
        /// List All Bindings for Queue
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Thinkcode.RabbitMQ.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vhost"></param>
        /// <param name="queue"></param>
        /// <returns>ICollection&lt;Binding&gt;</returns>
        ICollection<Binding> ListBindingsForQueue (string vhost, string queue);

        /// <summary>
        /// List All Bindings for Queue
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Thinkcode.RabbitMQ.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vhost"></param>
        /// <param name="queue"></param>
        /// <returns>ApiResponse of ICollection&lt;Binding&gt;</returns>
        ApiResponse<ICollection<Binding>> ListBindingsForQueueWithHttpInfo (string vhost, string queue);
        /// <summary>
        /// List Queues
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Thinkcode.RabbitMQ.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ICollection&lt;Queue&gt;</returns>
        ICollection<Queue> ListQueues ();

        /// <summary>
        /// List Queues
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Thinkcode.RabbitMQ.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ICollection&lt;Queue&gt;</returns>
        ApiResponse<ICollection<Queue>> ListQueuesWithHttpInfo ();
        /// <summary>
        /// List Queues for VHost
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Thinkcode.RabbitMQ.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vhost"></param>
        /// <returns>ICollection&lt;Queue&gt;</returns>
        ICollection<Queue> ListQueuesForVirtualHost (string vhost);

        /// <summary>
        /// List Queues for VHost
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Thinkcode.RabbitMQ.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vhost"></param>
        /// <returns>ApiResponse of ICollection&lt;Queue&gt;</returns>
        ApiResponse<ICollection<Queue>> ListQueuesForVirtualHostWithHttpInfo (string vhost);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IQueuesApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Consume Message
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Thinkcode.RabbitMQ.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vhost"></param>
        /// <param name="queue"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ICollection&lt;ConsumeResponse&gt;</returns>
        System.Threading.Tasks.Task<ICollection<ConsumeResponse>> ConsumeMessageAsync (string vhost, string queue, ConsumeRequest body = null);

        /// <summary>
        /// Consume Message
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Thinkcode.RabbitMQ.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vhost"></param>
        /// <param name="queue"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (ICollection&lt;ConsumeResponse&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<ICollection<ConsumeResponse>>> ConsumeMessageAsyncWithHttpInfo (string vhost, string queue, ConsumeRequest body = null);
        /// <summary>
        /// Create Queue
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Thinkcode.RabbitMQ.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vhost"></param>
        /// <param name="queue"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CreateQueueAsync (string vhost, string queue, QueueRequest body = null);

        /// <summary>
        /// Create Queue
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Thinkcode.RabbitMQ.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vhost"></param>
        /// <param name="queue"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CreateQueueAsyncWithHttpInfo (string vhost, string queue, QueueRequest body = null);
        /// <summary>
        /// Create Actions for Queue
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Thinkcode.RabbitMQ.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vhost"></param>
        /// <param name="queue"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CreateQueueActionsAsync (string vhost, string queue, QueueAction body = null);

        /// <summary>
        /// Create Actions for Queue
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Thinkcode.RabbitMQ.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vhost"></param>
        /// <param name="queue"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CreateQueueActionsAsyncWithHttpInfo (string vhost, string queue, QueueAction body = null);
        /// <summary>
        /// Delete Queue
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Thinkcode.RabbitMQ.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vhost"></param>
        /// <param name="queue"></param>
        /// <param name="ifEmpty"> (optional, default to true)</param>
        /// <param name="ifUnused"> (optional, default to true)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteQueueAsync (string vhost, string queue, bool? ifEmpty = null, bool? ifUnused = null);

        /// <summary>
        /// Delete Queue
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Thinkcode.RabbitMQ.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vhost"></param>
        /// <param name="queue"></param>
        /// <param name="ifEmpty"> (optional, default to true)</param>
        /// <param name="ifUnused"> (optional, default to true)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteQueueAsyncWithHttpInfo (string vhost, string queue, bool? ifEmpty = null, bool? ifUnused = null);
        /// <summary>
        /// Delete Queue Contents (Purge)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Thinkcode.RabbitMQ.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vhost"></param>
        /// <param name="queue"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteQueueContentsAsync (string vhost, string queue);

        /// <summary>
        /// Delete Queue Contents (Purge)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Thinkcode.RabbitMQ.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vhost"></param>
        /// <param name="queue"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteQueueContentsAsyncWithHttpInfo (string vhost, string queue);
        /// <summary>
        /// Get Queue
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Thinkcode.RabbitMQ.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vhost"></param>
        /// <param name="queue"></param>
        /// <returns>Task of Queue</returns>
        System.Threading.Tasks.Task<Queue> GetQueueAsync (string vhost, string queue);

        /// <summary>
        /// Get Queue
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Thinkcode.RabbitMQ.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vhost"></param>
        /// <param name="queue"></param>
        /// <returns>Task of ApiResponse (Queue)</returns>
        System.Threading.Tasks.Task<ApiResponse<Queue>> GetQueueAsyncWithHttpInfo (string vhost, string queue);
        /// <summary>
        /// List All Bindings for Queue
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Thinkcode.RabbitMQ.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vhost"></param>
        /// <param name="queue"></param>
        /// <returns>Task of ICollection&lt;Binding&gt;</returns>
        System.Threading.Tasks.Task<ICollection<Binding>> ListBindingsForQueueAsync (string vhost, string queue);

        /// <summary>
        /// List All Bindings for Queue
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Thinkcode.RabbitMQ.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vhost"></param>
        /// <param name="queue"></param>
        /// <returns>Task of ApiResponse (ICollection&lt;Binding&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<ICollection<Binding>>> ListBindingsForQueueAsyncWithHttpInfo (string vhost, string queue);
        /// <summary>
        /// List Queues
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Thinkcode.RabbitMQ.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ICollection&lt;Queue&gt;</returns>
        System.Threading.Tasks.Task<ICollection<Queue>> ListQueuesAsync ();

        /// <summary>
        /// List Queues
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Thinkcode.RabbitMQ.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (ICollection&lt;Queue&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<ICollection<Queue>>> ListQueuesAsyncWithHttpInfo ();
        /// <summary>
        /// List Queues for VHost
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Thinkcode.RabbitMQ.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vhost"></param>
        /// <returns>Task of ICollection&lt;Queue&gt;</returns>
        System.Threading.Tasks.Task<ICollection<Queue>> ListQueuesForVirtualHostAsync (string vhost);

        /// <summary>
        /// List Queues for VHost
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Thinkcode.RabbitMQ.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vhost"></param>
        /// <returns>Task of ApiResponse (ICollection&lt;Queue&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<ICollection<Queue>>> ListQueuesForVirtualHostAsyncWithHttpInfo (string vhost);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IQueuesApi : IQueuesApiSync, IQueuesApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class QueuesApi : IQueuesApi
    {
        private Thinkcode.RabbitMQ.OpenAPI.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="QueuesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public QueuesApi() : this((string) null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="QueuesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public QueuesApi(String basePath)
        {
            this.Configuration = Thinkcode.RabbitMQ.OpenAPI.Client.Configuration.MergeConfigurations(
                Thinkcode.RabbitMQ.OpenAPI.Client.GlobalConfiguration.Instance,
                new Thinkcode.RabbitMQ.OpenAPI.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Thinkcode.RabbitMQ.OpenAPI.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Thinkcode.RabbitMQ.OpenAPI.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Thinkcode.RabbitMQ.OpenAPI.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="QueuesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public QueuesApi(Thinkcode.RabbitMQ.OpenAPI.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Thinkcode.RabbitMQ.OpenAPI.Client.Configuration.MergeConfigurations(
                Thinkcode.RabbitMQ.OpenAPI.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Thinkcode.RabbitMQ.OpenAPI.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Thinkcode.RabbitMQ.OpenAPI.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Thinkcode.RabbitMQ.OpenAPI.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PetApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public QueuesApi(Thinkcode.RabbitMQ.OpenAPI.Client.ISynchronousClient client,Thinkcode.RabbitMQ.OpenAPI.Client.IAsynchronousClient asyncClient, Thinkcode.RabbitMQ.OpenAPI.Client.IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Thinkcode.RabbitMQ.OpenAPI.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Thinkcode.RabbitMQ.OpenAPI.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Thinkcode.RabbitMQ.OpenAPI.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Thinkcode.RabbitMQ.OpenAPI.Client.IReadableConfiguration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Thinkcode.RabbitMQ.OpenAPI.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Consume Message 
        /// </summary>
        /// <exception cref="Thinkcode.RabbitMQ.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vhost"></param>
        /// <param name="queue"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ICollection&lt;ConsumeResponse&gt;</returns>
        public ICollection<ConsumeResponse> ConsumeMessage (string vhost, string queue, ConsumeRequest body = null)
        {
             Thinkcode.RabbitMQ.OpenAPI.Client.ApiResponse<ICollection<ConsumeResponse>> localVarResponse = ConsumeMessageWithHttpInfo(vhost, queue, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Consume Message 
        /// </summary>
        /// <exception cref="Thinkcode.RabbitMQ.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vhost"></param>
        /// <param name="queue"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ICollection&lt;ConsumeResponse&gt;</returns>
        public Thinkcode.RabbitMQ.OpenAPI.Client.ApiResponse< ICollection<ConsumeResponse> > ConsumeMessageWithHttpInfo (string vhost, string queue, ConsumeRequest body = null)
        {
            // verify the required parameter 'vhost' is set
            if (vhost == null)
                throw new Thinkcode.RabbitMQ.OpenAPI.Client.ApiException(400, "Missing required parameter 'vhost' when calling QueuesApi->ConsumeMessage");

            // verify the required parameter 'queue' is set
            if (queue == null)
                throw new Thinkcode.RabbitMQ.OpenAPI.Client.ApiException(400, "Missing required parameter 'queue' when calling QueuesApi->ConsumeMessage");

            Thinkcode.RabbitMQ.OpenAPI.Client.RequestOptions requestOptions = new Thinkcode.RabbitMQ.OpenAPI.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Thinkcode.RabbitMQ.OpenAPI.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Thinkcode.RabbitMQ.OpenAPI.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (vhost != null)
                requestOptions.PathParameters.Add("vhost", Thinkcode.RabbitMQ.OpenAPI.Client.ClientUtils.ParameterToString(vhost)); // path parameter
            if (queue != null)
                requestOptions.PathParameters.Add("queue", Thinkcode.RabbitMQ.OpenAPI.Client.ClientUtils.ParameterToString(queue)); // path parameter
            requestOptions.Data = body;

            // authentication (basic_auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Basic " + Thinkcode.RabbitMQ.OpenAPI.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request

            var response = this.Client.Post< ICollection<ConsumeResponse> >("/queues/{vhost}/{queue}/get", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ConsumeMessage", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Consume Message 
        /// </summary>
        /// <exception cref="Thinkcode.RabbitMQ.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vhost"></param>
        /// <param name="queue"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ICollection&lt;ConsumeResponse&gt;</returns>
        public async System.Threading.Tasks.Task<ICollection<ConsumeResponse>> ConsumeMessageAsync (string vhost, string queue, ConsumeRequest body = null)
        {
             Thinkcode.RabbitMQ.OpenAPI.Client.ApiResponse<ICollection<ConsumeResponse>> localVarResponse = await ConsumeMessageAsyncWithHttpInfo(vhost, queue, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Consume Message 
        /// </summary>
        /// <exception cref="Thinkcode.RabbitMQ.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vhost"></param>
        /// <param name="queue"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (ICollection&lt;ConsumeResponse&gt;)</returns>
        public async System.Threading.Tasks.Task<Thinkcode.RabbitMQ.OpenAPI.Client.ApiResponse<ICollection<ConsumeResponse>>> ConsumeMessageAsyncWithHttpInfo (string vhost, string queue, ConsumeRequest body = null)
        {
            // verify the required parameter 'vhost' is set
            if (vhost == null)
                throw new Thinkcode.RabbitMQ.OpenAPI.Client.ApiException(400, "Missing required parameter 'vhost' when calling QueuesApi->ConsumeMessage");

            // verify the required parameter 'queue' is set
            if (queue == null)
                throw new Thinkcode.RabbitMQ.OpenAPI.Client.ApiException(400, "Missing required parameter 'queue' when calling QueuesApi->ConsumeMessage");


            Thinkcode.RabbitMQ.OpenAPI.Client.RequestOptions requestOptions = new Thinkcode.RabbitMQ.OpenAPI.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (vhost != null)
                requestOptions.PathParameters.Add("vhost", Thinkcode.RabbitMQ.OpenAPI.Client.ClientUtils.ParameterToString(vhost)); // path parameter
            if (queue != null)
                requestOptions.PathParameters.Add("queue", Thinkcode.RabbitMQ.OpenAPI.Client.ClientUtils.ParameterToString(queue)); // path parameter
            requestOptions.Data = body;

            // authentication (basic_auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Basic " + Thinkcode.RabbitMQ.OpenAPI.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.PostAsync<ICollection<ConsumeResponse>>("/queues/{vhost}/{queue}/get", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ConsumeMessage", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Create Queue 
        /// </summary>
        /// <exception cref="Thinkcode.RabbitMQ.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vhost"></param>
        /// <param name="queue"></param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        public void CreateQueue (string vhost, string queue, QueueRequest body = null)
        {
             CreateQueueWithHttpInfo(vhost, queue, body);
        }

        /// <summary>
        /// Create Queue 
        /// </summary>
        /// <exception cref="Thinkcode.RabbitMQ.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vhost"></param>
        /// <param name="queue"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Thinkcode.RabbitMQ.OpenAPI.Client.ApiResponse<Object> CreateQueueWithHttpInfo (string vhost, string queue, QueueRequest body = null)
        {
            // verify the required parameter 'vhost' is set
            if (vhost == null)
                throw new Thinkcode.RabbitMQ.OpenAPI.Client.ApiException(400, "Missing required parameter 'vhost' when calling QueuesApi->CreateQueue");

            // verify the required parameter 'queue' is set
            if (queue == null)
                throw new Thinkcode.RabbitMQ.OpenAPI.Client.ApiException(400, "Missing required parameter 'queue' when calling QueuesApi->CreateQueue");

            Thinkcode.RabbitMQ.OpenAPI.Client.RequestOptions requestOptions = new Thinkcode.RabbitMQ.OpenAPI.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
            };

            var localVarContentType = Thinkcode.RabbitMQ.OpenAPI.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Thinkcode.RabbitMQ.OpenAPI.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (vhost != null)
                requestOptions.PathParameters.Add("vhost", Thinkcode.RabbitMQ.OpenAPI.Client.ClientUtils.ParameterToString(vhost)); // path parameter
            if (queue != null)
                requestOptions.PathParameters.Add("queue", Thinkcode.RabbitMQ.OpenAPI.Client.ClientUtils.ParameterToString(queue)); // path parameter
            requestOptions.Data = body;

            // authentication (basic_auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Basic " + Thinkcode.RabbitMQ.OpenAPI.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request

            var response = this.Client.Put<Object>("/queues/{vhost}/{queue}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("CreateQueue", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Create Queue 
        /// </summary>
        /// <exception cref="Thinkcode.RabbitMQ.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vhost"></param>
        /// <param name="queue"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CreateQueueAsync (string vhost, string queue, QueueRequest body = null)
        {
             await CreateQueueAsyncWithHttpInfo(vhost, queue, body);

        }

        /// <summary>
        /// Create Queue 
        /// </summary>
        /// <exception cref="Thinkcode.RabbitMQ.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vhost"></param>
        /// <param name="queue"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Thinkcode.RabbitMQ.OpenAPI.Client.ApiResponse<Object>> CreateQueueAsyncWithHttpInfo (string vhost, string queue, QueueRequest body = null)
        {
            // verify the required parameter 'vhost' is set
            if (vhost == null)
                throw new Thinkcode.RabbitMQ.OpenAPI.Client.ApiException(400, "Missing required parameter 'vhost' when calling QueuesApi->CreateQueue");

            // verify the required parameter 'queue' is set
            if (queue == null)
                throw new Thinkcode.RabbitMQ.OpenAPI.Client.ApiException(400, "Missing required parameter 'queue' when calling QueuesApi->CreateQueue");


            Thinkcode.RabbitMQ.OpenAPI.Client.RequestOptions requestOptions = new Thinkcode.RabbitMQ.OpenAPI.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (vhost != null)
                requestOptions.PathParameters.Add("vhost", Thinkcode.RabbitMQ.OpenAPI.Client.ClientUtils.ParameterToString(vhost)); // path parameter
            if (queue != null)
                requestOptions.PathParameters.Add("queue", Thinkcode.RabbitMQ.OpenAPI.Client.ClientUtils.ParameterToString(queue)); // path parameter
            requestOptions.Data = body;

            // authentication (basic_auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Basic " + Thinkcode.RabbitMQ.OpenAPI.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.PutAsync<Object>("/queues/{vhost}/{queue}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("CreateQueue", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Create Actions for Queue 
        /// </summary>
        /// <exception cref="Thinkcode.RabbitMQ.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vhost"></param>
        /// <param name="queue"></param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        public void CreateQueueActions (string vhost, string queue, QueueAction body = null)
        {
             CreateQueueActionsWithHttpInfo(vhost, queue, body);
        }

        /// <summary>
        /// Create Actions for Queue 
        /// </summary>
        /// <exception cref="Thinkcode.RabbitMQ.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vhost"></param>
        /// <param name="queue"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Thinkcode.RabbitMQ.OpenAPI.Client.ApiResponse<Object> CreateQueueActionsWithHttpInfo (string vhost, string queue, QueueAction body = null)
        {
            // verify the required parameter 'vhost' is set
            if (vhost == null)
                throw new Thinkcode.RabbitMQ.OpenAPI.Client.ApiException(400, "Missing required parameter 'vhost' when calling QueuesApi->CreateQueueActions");

            // verify the required parameter 'queue' is set
            if (queue == null)
                throw new Thinkcode.RabbitMQ.OpenAPI.Client.ApiException(400, "Missing required parameter 'queue' when calling QueuesApi->CreateQueueActions");

            Thinkcode.RabbitMQ.OpenAPI.Client.RequestOptions requestOptions = new Thinkcode.RabbitMQ.OpenAPI.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
            };

            var localVarContentType = Thinkcode.RabbitMQ.OpenAPI.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Thinkcode.RabbitMQ.OpenAPI.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (vhost != null)
                requestOptions.PathParameters.Add("vhost", Thinkcode.RabbitMQ.OpenAPI.Client.ClientUtils.ParameterToString(vhost)); // path parameter
            if (queue != null)
                requestOptions.PathParameters.Add("queue", Thinkcode.RabbitMQ.OpenAPI.Client.ClientUtils.ParameterToString(queue)); // path parameter
            requestOptions.Data = body;

            // authentication (basic_auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Basic " + Thinkcode.RabbitMQ.OpenAPI.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request

            var response = this.Client.Post<Object>("/queues/{vhost}/{queue}/actions", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("CreateQueueActions", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Create Actions for Queue 
        /// </summary>
        /// <exception cref="Thinkcode.RabbitMQ.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vhost"></param>
        /// <param name="queue"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CreateQueueActionsAsync (string vhost, string queue, QueueAction body = null)
        {
             await CreateQueueActionsAsyncWithHttpInfo(vhost, queue, body);

        }

        /// <summary>
        /// Create Actions for Queue 
        /// </summary>
        /// <exception cref="Thinkcode.RabbitMQ.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vhost"></param>
        /// <param name="queue"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Thinkcode.RabbitMQ.OpenAPI.Client.ApiResponse<Object>> CreateQueueActionsAsyncWithHttpInfo (string vhost, string queue, QueueAction body = null)
        {
            // verify the required parameter 'vhost' is set
            if (vhost == null)
                throw new Thinkcode.RabbitMQ.OpenAPI.Client.ApiException(400, "Missing required parameter 'vhost' when calling QueuesApi->CreateQueueActions");

            // verify the required parameter 'queue' is set
            if (queue == null)
                throw new Thinkcode.RabbitMQ.OpenAPI.Client.ApiException(400, "Missing required parameter 'queue' when calling QueuesApi->CreateQueueActions");


            Thinkcode.RabbitMQ.OpenAPI.Client.RequestOptions requestOptions = new Thinkcode.RabbitMQ.OpenAPI.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (vhost != null)
                requestOptions.PathParameters.Add("vhost", Thinkcode.RabbitMQ.OpenAPI.Client.ClientUtils.ParameterToString(vhost)); // path parameter
            if (queue != null)
                requestOptions.PathParameters.Add("queue", Thinkcode.RabbitMQ.OpenAPI.Client.ClientUtils.ParameterToString(queue)); // path parameter
            requestOptions.Data = body;

            // authentication (basic_auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Basic " + Thinkcode.RabbitMQ.OpenAPI.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.PostAsync<Object>("/queues/{vhost}/{queue}/actions", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("CreateQueueActions", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Delete Queue 
        /// </summary>
        /// <exception cref="Thinkcode.RabbitMQ.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vhost"></param>
        /// <param name="queue"></param>
        /// <param name="ifEmpty"> (optional, default to true)</param>
        /// <param name="ifUnused"> (optional, default to true)</param>
        /// <returns></returns>
        public void DeleteQueue (string vhost, string queue, bool? ifEmpty = null, bool? ifUnused = null)
        {
             DeleteQueueWithHttpInfo(vhost, queue, ifEmpty, ifUnused);
        }

        /// <summary>
        /// Delete Queue 
        /// </summary>
        /// <exception cref="Thinkcode.RabbitMQ.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vhost"></param>
        /// <param name="queue"></param>
        /// <param name="ifEmpty"> (optional, default to true)</param>
        /// <param name="ifUnused"> (optional, default to true)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Thinkcode.RabbitMQ.OpenAPI.Client.ApiResponse<Object> DeleteQueueWithHttpInfo (string vhost, string queue, bool? ifEmpty = null, bool? ifUnused = null)
        {
            // verify the required parameter 'vhost' is set
            if (vhost == null)
                throw new Thinkcode.RabbitMQ.OpenAPI.Client.ApiException(400, "Missing required parameter 'vhost' when calling QueuesApi->DeleteQueue");

            // verify the required parameter 'queue' is set
            if (queue == null)
                throw new Thinkcode.RabbitMQ.OpenAPI.Client.ApiException(400, "Missing required parameter 'queue' when calling QueuesApi->DeleteQueue");

            Thinkcode.RabbitMQ.OpenAPI.Client.RequestOptions requestOptions = new Thinkcode.RabbitMQ.OpenAPI.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Thinkcode.RabbitMQ.OpenAPI.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Thinkcode.RabbitMQ.OpenAPI.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (vhost != null)
                requestOptions.PathParameters.Add("vhost", Thinkcode.RabbitMQ.OpenAPI.Client.ClientUtils.ParameterToString(vhost)); // path parameter
            if (queue != null)
                requestOptions.PathParameters.Add("queue", Thinkcode.RabbitMQ.OpenAPI.Client.ClientUtils.ParameterToString(queue)); // path parameter
            if (ifEmpty != null)
            {
                foreach (var kvp in Thinkcode.RabbitMQ.OpenAPI.Client.ClientUtils.ParameterToMultiMap("", "if-empty", ifEmpty))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (ifUnused != null)
            {
                foreach (var kvp in Thinkcode.RabbitMQ.OpenAPI.Client.ClientUtils.ParameterToMultiMap("", "if-unused", ifUnused))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            // authentication (basic_auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Basic " + Thinkcode.RabbitMQ.OpenAPI.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request

            var response = this.Client.Delete<Object>("/queues/{vhost}/{queue}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("DeleteQueue", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Delete Queue 
        /// </summary>
        /// <exception cref="Thinkcode.RabbitMQ.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vhost"></param>
        /// <param name="queue"></param>
        /// <param name="ifEmpty"> (optional, default to true)</param>
        /// <param name="ifUnused"> (optional, default to true)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteQueueAsync (string vhost, string queue, bool? ifEmpty = null, bool? ifUnused = null)
        {
             await DeleteQueueAsyncWithHttpInfo(vhost, queue, ifEmpty, ifUnused);

        }

        /// <summary>
        /// Delete Queue 
        /// </summary>
        /// <exception cref="Thinkcode.RabbitMQ.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vhost"></param>
        /// <param name="queue"></param>
        /// <param name="ifEmpty"> (optional, default to true)</param>
        /// <param name="ifUnused"> (optional, default to true)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Thinkcode.RabbitMQ.OpenAPI.Client.ApiResponse<Object>> DeleteQueueAsyncWithHttpInfo (string vhost, string queue, bool? ifEmpty = null, bool? ifUnused = null)
        {
            // verify the required parameter 'vhost' is set
            if (vhost == null)
                throw new Thinkcode.RabbitMQ.OpenAPI.Client.ApiException(400, "Missing required parameter 'vhost' when calling QueuesApi->DeleteQueue");

            // verify the required parameter 'queue' is set
            if (queue == null)
                throw new Thinkcode.RabbitMQ.OpenAPI.Client.ApiException(400, "Missing required parameter 'queue' when calling QueuesApi->DeleteQueue");


            Thinkcode.RabbitMQ.OpenAPI.Client.RequestOptions requestOptions = new Thinkcode.RabbitMQ.OpenAPI.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (vhost != null)
                requestOptions.PathParameters.Add("vhost", Thinkcode.RabbitMQ.OpenAPI.Client.ClientUtils.ParameterToString(vhost)); // path parameter
            if (queue != null)
                requestOptions.PathParameters.Add("queue", Thinkcode.RabbitMQ.OpenAPI.Client.ClientUtils.ParameterToString(queue)); // path parameter
            if (ifEmpty != null)
            {
                foreach (var kvp in Thinkcode.RabbitMQ.OpenAPI.Client.ClientUtils.ParameterToMultiMap("", "if-empty", ifEmpty))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (ifUnused != null)
            {
                foreach (var kvp in Thinkcode.RabbitMQ.OpenAPI.Client.ClientUtils.ParameterToMultiMap("", "if-unused", ifUnused))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            // authentication (basic_auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Basic " + Thinkcode.RabbitMQ.OpenAPI.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.DeleteAsync<Object>("/queues/{vhost}/{queue}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("DeleteQueue", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Delete Queue Contents (Purge) 
        /// </summary>
        /// <exception cref="Thinkcode.RabbitMQ.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vhost"></param>
        /// <param name="queue"></param>
        /// <returns></returns>
        public void DeleteQueueContents (string vhost, string queue)
        {
             DeleteQueueContentsWithHttpInfo(vhost, queue);
        }

        /// <summary>
        /// Delete Queue Contents (Purge) 
        /// </summary>
        /// <exception cref="Thinkcode.RabbitMQ.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vhost"></param>
        /// <param name="queue"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Thinkcode.RabbitMQ.OpenAPI.Client.ApiResponse<Object> DeleteQueueContentsWithHttpInfo (string vhost, string queue)
        {
            // verify the required parameter 'vhost' is set
            if (vhost == null)
                throw new Thinkcode.RabbitMQ.OpenAPI.Client.ApiException(400, "Missing required parameter 'vhost' when calling QueuesApi->DeleteQueueContents");

            // verify the required parameter 'queue' is set
            if (queue == null)
                throw new Thinkcode.RabbitMQ.OpenAPI.Client.ApiException(400, "Missing required parameter 'queue' when calling QueuesApi->DeleteQueueContents");

            Thinkcode.RabbitMQ.OpenAPI.Client.RequestOptions requestOptions = new Thinkcode.RabbitMQ.OpenAPI.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
            };

            var localVarContentType = Thinkcode.RabbitMQ.OpenAPI.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Thinkcode.RabbitMQ.OpenAPI.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (vhost != null)
                requestOptions.PathParameters.Add("vhost", Thinkcode.RabbitMQ.OpenAPI.Client.ClientUtils.ParameterToString(vhost)); // path parameter
            if (queue != null)
                requestOptions.PathParameters.Add("queue", Thinkcode.RabbitMQ.OpenAPI.Client.ClientUtils.ParameterToString(queue)); // path parameter

            // authentication (basic_auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Basic " + Thinkcode.RabbitMQ.OpenAPI.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request

            var response = this.Client.Delete<Object>("/queues/{vhost}/{queue}/contents", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("DeleteQueueContents", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Delete Queue Contents (Purge) 
        /// </summary>
        /// <exception cref="Thinkcode.RabbitMQ.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vhost"></param>
        /// <param name="queue"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteQueueContentsAsync (string vhost, string queue)
        {
             await DeleteQueueContentsAsyncWithHttpInfo(vhost, queue);

        }

        /// <summary>
        /// Delete Queue Contents (Purge) 
        /// </summary>
        /// <exception cref="Thinkcode.RabbitMQ.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vhost"></param>
        /// <param name="queue"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Thinkcode.RabbitMQ.OpenAPI.Client.ApiResponse<Object>> DeleteQueueContentsAsyncWithHttpInfo (string vhost, string queue)
        {
            // verify the required parameter 'vhost' is set
            if (vhost == null)
                throw new Thinkcode.RabbitMQ.OpenAPI.Client.ApiException(400, "Missing required parameter 'vhost' when calling QueuesApi->DeleteQueueContents");

            // verify the required parameter 'queue' is set
            if (queue == null)
                throw new Thinkcode.RabbitMQ.OpenAPI.Client.ApiException(400, "Missing required parameter 'queue' when calling QueuesApi->DeleteQueueContents");


            Thinkcode.RabbitMQ.OpenAPI.Client.RequestOptions requestOptions = new Thinkcode.RabbitMQ.OpenAPI.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (vhost != null)
                requestOptions.PathParameters.Add("vhost", Thinkcode.RabbitMQ.OpenAPI.Client.ClientUtils.ParameterToString(vhost)); // path parameter
            if (queue != null)
                requestOptions.PathParameters.Add("queue", Thinkcode.RabbitMQ.OpenAPI.Client.ClientUtils.ParameterToString(queue)); // path parameter

            // authentication (basic_auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Basic " + Thinkcode.RabbitMQ.OpenAPI.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.DeleteAsync<Object>("/queues/{vhost}/{queue}/contents", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("DeleteQueueContents", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Get Queue 
        /// </summary>
        /// <exception cref="Thinkcode.RabbitMQ.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vhost"></param>
        /// <param name="queue"></param>
        /// <returns>Queue</returns>
        public Queue GetQueue (string vhost, string queue)
        {
             Thinkcode.RabbitMQ.OpenAPI.Client.ApiResponse<Queue> localVarResponse = GetQueueWithHttpInfo(vhost, queue);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Queue 
        /// </summary>
        /// <exception cref="Thinkcode.RabbitMQ.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vhost"></param>
        /// <param name="queue"></param>
        /// <returns>ApiResponse of Queue</returns>
        public Thinkcode.RabbitMQ.OpenAPI.Client.ApiResponse< Queue > GetQueueWithHttpInfo (string vhost, string queue)
        {
            // verify the required parameter 'vhost' is set
            if (vhost == null)
                throw new Thinkcode.RabbitMQ.OpenAPI.Client.ApiException(400, "Missing required parameter 'vhost' when calling QueuesApi->GetQueue");

            // verify the required parameter 'queue' is set
            if (queue == null)
                throw new Thinkcode.RabbitMQ.OpenAPI.Client.ApiException(400, "Missing required parameter 'queue' when calling QueuesApi->GetQueue");

            Thinkcode.RabbitMQ.OpenAPI.Client.RequestOptions requestOptions = new Thinkcode.RabbitMQ.OpenAPI.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Thinkcode.RabbitMQ.OpenAPI.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Thinkcode.RabbitMQ.OpenAPI.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (vhost != null)
                requestOptions.PathParameters.Add("vhost", Thinkcode.RabbitMQ.OpenAPI.Client.ClientUtils.ParameterToString(vhost)); // path parameter
            if (queue != null)
                requestOptions.PathParameters.Add("queue", Thinkcode.RabbitMQ.OpenAPI.Client.ClientUtils.ParameterToString(queue)); // path parameter

            // authentication (basic_auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Basic " + Thinkcode.RabbitMQ.OpenAPI.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request

            var response = this.Client.Get< Queue >("/queues/{vhost}/{queue}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetQueue", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Get Queue 
        /// </summary>
        /// <exception cref="Thinkcode.RabbitMQ.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vhost"></param>
        /// <param name="queue"></param>
        /// <returns>Task of Queue</returns>
        public async System.Threading.Tasks.Task<Queue> GetQueueAsync (string vhost, string queue)
        {
             Thinkcode.RabbitMQ.OpenAPI.Client.ApiResponse<Queue> localVarResponse = await GetQueueAsyncWithHttpInfo(vhost, queue);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Queue 
        /// </summary>
        /// <exception cref="Thinkcode.RabbitMQ.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vhost"></param>
        /// <param name="queue"></param>
        /// <returns>Task of ApiResponse (Queue)</returns>
        public async System.Threading.Tasks.Task<Thinkcode.RabbitMQ.OpenAPI.Client.ApiResponse<Queue>> GetQueueAsyncWithHttpInfo (string vhost, string queue)
        {
            // verify the required parameter 'vhost' is set
            if (vhost == null)
                throw new Thinkcode.RabbitMQ.OpenAPI.Client.ApiException(400, "Missing required parameter 'vhost' when calling QueuesApi->GetQueue");

            // verify the required parameter 'queue' is set
            if (queue == null)
                throw new Thinkcode.RabbitMQ.OpenAPI.Client.ApiException(400, "Missing required parameter 'queue' when calling QueuesApi->GetQueue");


            Thinkcode.RabbitMQ.OpenAPI.Client.RequestOptions requestOptions = new Thinkcode.RabbitMQ.OpenAPI.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (vhost != null)
                requestOptions.PathParameters.Add("vhost", Thinkcode.RabbitMQ.OpenAPI.Client.ClientUtils.ParameterToString(vhost)); // path parameter
            if (queue != null)
                requestOptions.PathParameters.Add("queue", Thinkcode.RabbitMQ.OpenAPI.Client.ClientUtils.ParameterToString(queue)); // path parameter

            // authentication (basic_auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Basic " + Thinkcode.RabbitMQ.OpenAPI.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<Queue>("/queues/{vhost}/{queue}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetQueue", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// List All Bindings for Queue 
        /// </summary>
        /// <exception cref="Thinkcode.RabbitMQ.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vhost"></param>
        /// <param name="queue"></param>
        /// <returns>ICollection&lt;Binding&gt;</returns>
        public ICollection<Binding> ListBindingsForQueue (string vhost, string queue)
        {
             Thinkcode.RabbitMQ.OpenAPI.Client.ApiResponse<ICollection<Binding>> localVarResponse = ListBindingsForQueueWithHttpInfo(vhost, queue);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List All Bindings for Queue 
        /// </summary>
        /// <exception cref="Thinkcode.RabbitMQ.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vhost"></param>
        /// <param name="queue"></param>
        /// <returns>ApiResponse of ICollection&lt;Binding&gt;</returns>
        public Thinkcode.RabbitMQ.OpenAPI.Client.ApiResponse< ICollection<Binding> > ListBindingsForQueueWithHttpInfo (string vhost, string queue)
        {
            // verify the required parameter 'vhost' is set
            if (vhost == null)
                throw new Thinkcode.RabbitMQ.OpenAPI.Client.ApiException(400, "Missing required parameter 'vhost' when calling QueuesApi->ListBindingsForQueue");

            // verify the required parameter 'queue' is set
            if (queue == null)
                throw new Thinkcode.RabbitMQ.OpenAPI.Client.ApiException(400, "Missing required parameter 'queue' when calling QueuesApi->ListBindingsForQueue");

            Thinkcode.RabbitMQ.OpenAPI.Client.RequestOptions requestOptions = new Thinkcode.RabbitMQ.OpenAPI.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Thinkcode.RabbitMQ.OpenAPI.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Thinkcode.RabbitMQ.OpenAPI.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (vhost != null)
                requestOptions.PathParameters.Add("vhost", Thinkcode.RabbitMQ.OpenAPI.Client.ClientUtils.ParameterToString(vhost)); // path parameter
            if (queue != null)
                requestOptions.PathParameters.Add("queue", Thinkcode.RabbitMQ.OpenAPI.Client.ClientUtils.ParameterToString(queue)); // path parameter

            // authentication (basic_auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Basic " + Thinkcode.RabbitMQ.OpenAPI.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request

            var response = this.Client.Get< ICollection<Binding> >("/queues/{vhost}/{queue}/bindings", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ListBindingsForQueue", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// List All Bindings for Queue 
        /// </summary>
        /// <exception cref="Thinkcode.RabbitMQ.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vhost"></param>
        /// <param name="queue"></param>
        /// <returns>Task of ICollection&lt;Binding&gt;</returns>
        public async System.Threading.Tasks.Task<ICollection<Binding>> ListBindingsForQueueAsync (string vhost, string queue)
        {
             Thinkcode.RabbitMQ.OpenAPI.Client.ApiResponse<ICollection<Binding>> localVarResponse = await ListBindingsForQueueAsyncWithHttpInfo(vhost, queue);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List All Bindings for Queue 
        /// </summary>
        /// <exception cref="Thinkcode.RabbitMQ.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vhost"></param>
        /// <param name="queue"></param>
        /// <returns>Task of ApiResponse (ICollection&lt;Binding&gt;)</returns>
        public async System.Threading.Tasks.Task<Thinkcode.RabbitMQ.OpenAPI.Client.ApiResponse<ICollection<Binding>>> ListBindingsForQueueAsyncWithHttpInfo (string vhost, string queue)
        {
            // verify the required parameter 'vhost' is set
            if (vhost == null)
                throw new Thinkcode.RabbitMQ.OpenAPI.Client.ApiException(400, "Missing required parameter 'vhost' when calling QueuesApi->ListBindingsForQueue");

            // verify the required parameter 'queue' is set
            if (queue == null)
                throw new Thinkcode.RabbitMQ.OpenAPI.Client.ApiException(400, "Missing required parameter 'queue' when calling QueuesApi->ListBindingsForQueue");


            Thinkcode.RabbitMQ.OpenAPI.Client.RequestOptions requestOptions = new Thinkcode.RabbitMQ.OpenAPI.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (vhost != null)
                requestOptions.PathParameters.Add("vhost", Thinkcode.RabbitMQ.OpenAPI.Client.ClientUtils.ParameterToString(vhost)); // path parameter
            if (queue != null)
                requestOptions.PathParameters.Add("queue", Thinkcode.RabbitMQ.OpenAPI.Client.ClientUtils.ParameterToString(queue)); // path parameter

            // authentication (basic_auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Basic " + Thinkcode.RabbitMQ.OpenAPI.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<ICollection<Binding>>("/queues/{vhost}/{queue}/bindings", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ListBindingsForQueue", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// List Queues 
        /// </summary>
        /// <exception cref="Thinkcode.RabbitMQ.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ICollection&lt;Queue&gt;</returns>
        public ICollection<Queue> ListQueues ()
        {
             Thinkcode.RabbitMQ.OpenAPI.Client.ApiResponse<ICollection<Queue>> localVarResponse = ListQueuesWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// List Queues 
        /// </summary>
        /// <exception cref="Thinkcode.RabbitMQ.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ICollection&lt;Queue&gt;</returns>
        public Thinkcode.RabbitMQ.OpenAPI.Client.ApiResponse< ICollection<Queue> > ListQueuesWithHttpInfo ()
        {
            Thinkcode.RabbitMQ.OpenAPI.Client.RequestOptions requestOptions = new Thinkcode.RabbitMQ.OpenAPI.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Thinkcode.RabbitMQ.OpenAPI.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Thinkcode.RabbitMQ.OpenAPI.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (basic_auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Basic " + Thinkcode.RabbitMQ.OpenAPI.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request

            var response = this.Client.Get< ICollection<Queue> >("/queues", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ListQueues", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// List Queues 
        /// </summary>
        /// <exception cref="Thinkcode.RabbitMQ.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ICollection&lt;Queue&gt;</returns>
        public async System.Threading.Tasks.Task<ICollection<Queue>> ListQueuesAsync ()
        {
             Thinkcode.RabbitMQ.OpenAPI.Client.ApiResponse<ICollection<Queue>> localVarResponse = await ListQueuesAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// List Queues 
        /// </summary>
        /// <exception cref="Thinkcode.RabbitMQ.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (ICollection&lt;Queue&gt;)</returns>
        public async System.Threading.Tasks.Task<Thinkcode.RabbitMQ.OpenAPI.Client.ApiResponse<ICollection<Queue>>> ListQueuesAsyncWithHttpInfo ()
        {

            Thinkcode.RabbitMQ.OpenAPI.Client.RequestOptions requestOptions = new Thinkcode.RabbitMQ.OpenAPI.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            

            // authentication (basic_auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Basic " + Thinkcode.RabbitMQ.OpenAPI.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<ICollection<Queue>>("/queues", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ListQueues", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// List Queues for VHost 
        /// </summary>
        /// <exception cref="Thinkcode.RabbitMQ.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vhost"></param>
        /// <returns>ICollection&lt;Queue&gt;</returns>
        public ICollection<Queue> ListQueuesForVirtualHost (string vhost)
        {
             Thinkcode.RabbitMQ.OpenAPI.Client.ApiResponse<ICollection<Queue>> localVarResponse = ListQueuesForVirtualHostWithHttpInfo(vhost);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List Queues for VHost 
        /// </summary>
        /// <exception cref="Thinkcode.RabbitMQ.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vhost"></param>
        /// <returns>ApiResponse of ICollection&lt;Queue&gt;</returns>
        public Thinkcode.RabbitMQ.OpenAPI.Client.ApiResponse< ICollection<Queue> > ListQueuesForVirtualHostWithHttpInfo (string vhost)
        {
            // verify the required parameter 'vhost' is set
            if (vhost == null)
                throw new Thinkcode.RabbitMQ.OpenAPI.Client.ApiException(400, "Missing required parameter 'vhost' when calling QueuesApi->ListQueuesForVirtualHost");

            Thinkcode.RabbitMQ.OpenAPI.Client.RequestOptions requestOptions = new Thinkcode.RabbitMQ.OpenAPI.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Thinkcode.RabbitMQ.OpenAPI.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Thinkcode.RabbitMQ.OpenAPI.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (vhost != null)
                requestOptions.PathParameters.Add("vhost", Thinkcode.RabbitMQ.OpenAPI.Client.ClientUtils.ParameterToString(vhost)); // path parameter

            // authentication (basic_auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Basic " + Thinkcode.RabbitMQ.OpenAPI.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request

            var response = this.Client.Get< ICollection<Queue> >("/queues/{vhost}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ListQueuesForVirtualHost", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// List Queues for VHost 
        /// </summary>
        /// <exception cref="Thinkcode.RabbitMQ.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vhost"></param>
        /// <returns>Task of ICollection&lt;Queue&gt;</returns>
        public async System.Threading.Tasks.Task<ICollection<Queue>> ListQueuesForVirtualHostAsync (string vhost)
        {
             Thinkcode.RabbitMQ.OpenAPI.Client.ApiResponse<ICollection<Queue>> localVarResponse = await ListQueuesForVirtualHostAsyncWithHttpInfo(vhost);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List Queues for VHost 
        /// </summary>
        /// <exception cref="Thinkcode.RabbitMQ.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vhost"></param>
        /// <returns>Task of ApiResponse (ICollection&lt;Queue&gt;)</returns>
        public async System.Threading.Tasks.Task<Thinkcode.RabbitMQ.OpenAPI.Client.ApiResponse<ICollection<Queue>>> ListQueuesForVirtualHostAsyncWithHttpInfo (string vhost)
        {
            // verify the required parameter 'vhost' is set
            if (vhost == null)
                throw new Thinkcode.RabbitMQ.OpenAPI.Client.ApiException(400, "Missing required parameter 'vhost' when calling QueuesApi->ListQueuesForVirtualHost");


            Thinkcode.RabbitMQ.OpenAPI.Client.RequestOptions requestOptions = new Thinkcode.RabbitMQ.OpenAPI.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (vhost != null)
                requestOptions.PathParameters.Add("vhost", Thinkcode.RabbitMQ.OpenAPI.Client.ClientUtils.ParameterToString(vhost)); // path parameter

            // authentication (basic_auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Basic " + Thinkcode.RabbitMQ.OpenAPI.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<ICollection<Queue>>("/queues/{vhost}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ListQueuesForVirtualHost", response);
                if (exception != null) throw exception;
            }

            return response;
        }

    }
}
