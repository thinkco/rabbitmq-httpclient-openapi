/* 
 * Rabbitmq Http API
 *
 * This is the OpenAPI specification of the RabbitMQ HTTP API. For more information, please refer to [HTTP API](https://cdn.rawgit.com/rabbitmq/rabbitmq-management/v3.7.14/priv/www/api/index.html) official documentation.
 *
 * OpenAPI spec version: 1.0
 * Contact: carlos@adaptive.me
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Thinkcode.RabbitMQ.OpenAPI.Client.OpenAPIDateConverter;

namespace Thinkcode.RabbitMQ.OpenAPI.Model
{
    /// <summary>
    /// QueueGarbageCollection
    /// </summary>
    [DataContract]
    public partial class QueueGarbageCollection :  IEquatable<QueueGarbageCollection>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="QueueGarbageCollection" /> class.
        /// </summary>
        /// <param name="maxHeapSize">maxHeapSize.</param>
        /// <param name="minorGcs">minorGcs.</param>
        /// <param name="minBinVheapSize">minBinVheapSize.</param>
        /// <param name="minHeapSize">minHeapSize.</param>
        /// <param name="fullsweepAfter">fullsweepAfter.</param>
        public QueueGarbageCollection(int maxHeapSize = default(int), int minorGcs = default(int), int minBinVheapSize = default(int), int minHeapSize = default(int), int fullsweepAfter = default(int))
        {
            this.MaxHeapSize = maxHeapSize;
            this.MinorGcs = minorGcs;
            this.MinBinVheapSize = minBinVheapSize;
            this.MinHeapSize = minHeapSize;
            this.FullsweepAfter = fullsweepAfter;
        }
        
        /// <summary>
        /// Gets or Sets MaxHeapSize
        /// </summary>
        [DataMember(Name="max_heap_size", EmitDefaultValue=false)]
        public int MaxHeapSize { get; set; }

        /// <summary>
        /// Gets or Sets MinorGcs
        /// </summary>
        [DataMember(Name="minor_gcs", EmitDefaultValue=false)]
        public int MinorGcs { get; set; }

        /// <summary>
        /// Gets or Sets MinBinVheapSize
        /// </summary>
        [DataMember(Name="min_bin_vheap_size", EmitDefaultValue=false)]
        public int MinBinVheapSize { get; set; }

        /// <summary>
        /// Gets or Sets MinHeapSize
        /// </summary>
        [DataMember(Name="min_heap_size", EmitDefaultValue=false)]
        public int MinHeapSize { get; set; }

        /// <summary>
        /// Gets or Sets FullsweepAfter
        /// </summary>
        [DataMember(Name="fullsweep_after", EmitDefaultValue=false)]
        public int FullsweepAfter { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class QueueGarbageCollection {\n");
            sb.Append("  MaxHeapSize: ").Append(MaxHeapSize).Append("\n");
            sb.Append("  MinorGcs: ").Append(MinorGcs).Append("\n");
            sb.Append("  MinBinVheapSize: ").Append(MinBinVheapSize).Append("\n");
            sb.Append("  MinHeapSize: ").Append(MinHeapSize).Append("\n");
            sb.Append("  FullsweepAfter: ").Append(FullsweepAfter).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as QueueGarbageCollection);
        }

        /// <summary>
        /// Returns true if QueueGarbageCollection instances are equal
        /// </summary>
        /// <param name="input">Instance of QueueGarbageCollection to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(QueueGarbageCollection input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.MaxHeapSize == input.MaxHeapSize ||
                    (this.MaxHeapSize != null &&
                    this.MaxHeapSize.Equals(input.MaxHeapSize))
                ) && 
                (
                    this.MinorGcs == input.MinorGcs ||
                    (this.MinorGcs != null &&
                    this.MinorGcs.Equals(input.MinorGcs))
                ) && 
                (
                    this.MinBinVheapSize == input.MinBinVheapSize ||
                    (this.MinBinVheapSize != null &&
                    this.MinBinVheapSize.Equals(input.MinBinVheapSize))
                ) && 
                (
                    this.MinHeapSize == input.MinHeapSize ||
                    (this.MinHeapSize != null &&
                    this.MinHeapSize.Equals(input.MinHeapSize))
                ) && 
                (
                    this.FullsweepAfter == input.FullsweepAfter ||
                    (this.FullsweepAfter != null &&
                    this.FullsweepAfter.Equals(input.FullsweepAfter))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.MaxHeapSize != null)
                    hashCode = hashCode * 59 + this.MaxHeapSize.GetHashCode();
                if (this.MinorGcs != null)
                    hashCode = hashCode * 59 + this.MinorGcs.GetHashCode();
                if (this.MinBinVheapSize != null)
                    hashCode = hashCode * 59 + this.MinBinVheapSize.GetHashCode();
                if (this.MinHeapSize != null)
                    hashCode = hashCode * 59 + this.MinHeapSize.GetHashCode();
                if (this.FullsweepAfter != null)
                    hashCode = hashCode * 59 + this.FullsweepAfter.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
