/* 
 * Rabbitmq Http API
 *
 * This is the OpenAPI specification of the RabbitMQ HTTP API. For more information, please refer to [HTTP API](https://cdn.rawgit.com/rabbitmq/rabbitmq-management/v3.7.14/priv/www/api/index.html) official documentation.
 *
 * OpenAPI spec version: 1.0
 * Contact: carlos@adaptive.me
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Thinkcode.RabbitMQ.OpenAPI.Client;
using Thinkcode.RabbitMQ.OpenAPI.Model;

namespace Thinkcode.RabbitMQ.OpenAPI.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IExchangesApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create Exchange
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Thinkcode.RabbitMQ.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vhost"></param>
        /// <param name="exchange"></param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        void CreateExchange (string vhost, string exchange, ExchangeRequest body = null);

        /// <summary>
        /// Create Exchange
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Thinkcode.RabbitMQ.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vhost"></param>
        /// <param name="exchange"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CreateExchangeWithHttpInfo (string vhost, string exchange, ExchangeRequest body = null);
        /// <summary>
        /// Delete Exchange
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Thinkcode.RabbitMQ.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vhost"></param>
        /// <param name="exchange"></param>
        /// <returns></returns>
        void DeleteExchange (string vhost, string exchange);

        /// <summary>
        /// Delete Exchange
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Thinkcode.RabbitMQ.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vhost"></param>
        /// <param name="exchange"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteExchangeWithHttpInfo (string vhost, string exchange);
        /// <summary>
        /// Read Exchange
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Thinkcode.RabbitMQ.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vhost"></param>
        /// <param name="exchange"></param>
        /// <returns>Exchange</returns>
        Exchange GetExchange (string vhost, string exchange);

        /// <summary>
        /// Read Exchange
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Thinkcode.RabbitMQ.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vhost"></param>
        /// <param name="exchange"></param>
        /// <returns>ApiResponse of Exchange</returns>
        ApiResponse<Exchange> GetExchangeWithHttpInfo (string vhost, string exchange);
        /// <summary>
        /// List Exchanges
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Thinkcode.RabbitMQ.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ICollection&lt;Exchange&gt;</returns>
        ICollection<Exchange> ListExchanges ();

        /// <summary>
        /// List Exchanges
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Thinkcode.RabbitMQ.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ICollection&lt;Exchange&gt;</returns>
        ApiResponse<ICollection<Exchange>> ListExchangesWithHttpInfo ();
        /// <summary>
        /// List Exchanges for VHost
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Thinkcode.RabbitMQ.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vhost"></param>
        /// <returns>ICollection&lt;Exchange&gt;</returns>
        ICollection<Exchange> ListExchangesForHost (string vhost);

        /// <summary>
        /// List Exchanges for VHost
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Thinkcode.RabbitMQ.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vhost"></param>
        /// <returns>ApiResponse of ICollection&lt;Exchange&gt;</returns>
        ApiResponse<ICollection<Exchange>> ListExchangesForHostWithHttpInfo (string vhost);
        /// <summary>
        /// Publish Message
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Thinkcode.RabbitMQ.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vhost"></param>
        /// <param name="exchange"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>PublishResponse</returns>
        PublishResponse PublishMessage (string vhost, string exchange, PublishRequest body = null);

        /// <summary>
        /// Publish Message
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Thinkcode.RabbitMQ.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vhost"></param>
        /// <param name="exchange"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of PublishResponse</returns>
        ApiResponse<PublishResponse> PublishMessageWithHttpInfo (string vhost, string exchange, PublishRequest body = null);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IExchangesApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Create Exchange
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Thinkcode.RabbitMQ.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vhost"></param>
        /// <param name="exchange"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CreateExchangeAsync (string vhost, string exchange, ExchangeRequest body = null);

        /// <summary>
        /// Create Exchange
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Thinkcode.RabbitMQ.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vhost"></param>
        /// <param name="exchange"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CreateExchangeAsyncWithHttpInfo (string vhost, string exchange, ExchangeRequest body = null);
        /// <summary>
        /// Delete Exchange
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Thinkcode.RabbitMQ.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vhost"></param>
        /// <param name="exchange"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteExchangeAsync (string vhost, string exchange);

        /// <summary>
        /// Delete Exchange
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Thinkcode.RabbitMQ.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vhost"></param>
        /// <param name="exchange"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteExchangeAsyncWithHttpInfo (string vhost, string exchange);
        /// <summary>
        /// Read Exchange
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Thinkcode.RabbitMQ.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vhost"></param>
        /// <param name="exchange"></param>
        /// <returns>Task of Exchange</returns>
        System.Threading.Tasks.Task<Exchange> GetExchangeAsync (string vhost, string exchange);

        /// <summary>
        /// Read Exchange
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Thinkcode.RabbitMQ.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vhost"></param>
        /// <param name="exchange"></param>
        /// <returns>Task of ApiResponse (Exchange)</returns>
        System.Threading.Tasks.Task<ApiResponse<Exchange>> GetExchangeAsyncWithHttpInfo (string vhost, string exchange);
        /// <summary>
        /// List Exchanges
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Thinkcode.RabbitMQ.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ICollection&lt;Exchange&gt;</returns>
        System.Threading.Tasks.Task<ICollection<Exchange>> ListExchangesAsync ();

        /// <summary>
        /// List Exchanges
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Thinkcode.RabbitMQ.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (ICollection&lt;Exchange&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<ICollection<Exchange>>> ListExchangesAsyncWithHttpInfo ();
        /// <summary>
        /// List Exchanges for VHost
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Thinkcode.RabbitMQ.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vhost"></param>
        /// <returns>Task of ICollection&lt;Exchange&gt;</returns>
        System.Threading.Tasks.Task<ICollection<Exchange>> ListExchangesForHostAsync (string vhost);

        /// <summary>
        /// List Exchanges for VHost
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Thinkcode.RabbitMQ.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vhost"></param>
        /// <returns>Task of ApiResponse (ICollection&lt;Exchange&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<ICollection<Exchange>>> ListExchangesForHostAsyncWithHttpInfo (string vhost);
        /// <summary>
        /// Publish Message
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Thinkcode.RabbitMQ.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vhost"></param>
        /// <param name="exchange"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of PublishResponse</returns>
        System.Threading.Tasks.Task<PublishResponse> PublishMessageAsync (string vhost, string exchange, PublishRequest body = null);

        /// <summary>
        /// Publish Message
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Thinkcode.RabbitMQ.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vhost"></param>
        /// <param name="exchange"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (PublishResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PublishResponse>> PublishMessageAsyncWithHttpInfo (string vhost, string exchange, PublishRequest body = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IExchangesApi : IExchangesApiSync, IExchangesApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ExchangesApi : IExchangesApi
    {
        private Thinkcode.RabbitMQ.OpenAPI.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ExchangesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ExchangesApi() : this((string) null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ExchangesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ExchangesApi(String basePath)
        {
            this.Configuration = Thinkcode.RabbitMQ.OpenAPI.Client.Configuration.MergeConfigurations(
                Thinkcode.RabbitMQ.OpenAPI.Client.GlobalConfiguration.Instance,
                new Thinkcode.RabbitMQ.OpenAPI.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Thinkcode.RabbitMQ.OpenAPI.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Thinkcode.RabbitMQ.OpenAPI.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Thinkcode.RabbitMQ.OpenAPI.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ExchangesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ExchangesApi(Thinkcode.RabbitMQ.OpenAPI.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Thinkcode.RabbitMQ.OpenAPI.Client.Configuration.MergeConfigurations(
                Thinkcode.RabbitMQ.OpenAPI.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Thinkcode.RabbitMQ.OpenAPI.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Thinkcode.RabbitMQ.OpenAPI.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Thinkcode.RabbitMQ.OpenAPI.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PetApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ExchangesApi(Thinkcode.RabbitMQ.OpenAPI.Client.ISynchronousClient client,Thinkcode.RabbitMQ.OpenAPI.Client.IAsynchronousClient asyncClient, Thinkcode.RabbitMQ.OpenAPI.Client.IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Thinkcode.RabbitMQ.OpenAPI.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Thinkcode.RabbitMQ.OpenAPI.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Thinkcode.RabbitMQ.OpenAPI.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Thinkcode.RabbitMQ.OpenAPI.Client.IReadableConfiguration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Thinkcode.RabbitMQ.OpenAPI.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Create Exchange 
        /// </summary>
        /// <exception cref="Thinkcode.RabbitMQ.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vhost"></param>
        /// <param name="exchange"></param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        public void CreateExchange (string vhost, string exchange, ExchangeRequest body = null)
        {
             CreateExchangeWithHttpInfo(vhost, exchange, body);
        }

        /// <summary>
        /// Create Exchange 
        /// </summary>
        /// <exception cref="Thinkcode.RabbitMQ.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vhost"></param>
        /// <param name="exchange"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Thinkcode.RabbitMQ.OpenAPI.Client.ApiResponse<Object> CreateExchangeWithHttpInfo (string vhost, string exchange, ExchangeRequest body = null)
        {
            // verify the required parameter 'vhost' is set
            if (vhost == null)
                throw new Thinkcode.RabbitMQ.OpenAPI.Client.ApiException(400, "Missing required parameter 'vhost' when calling ExchangesApi->CreateExchange");

            // verify the required parameter 'exchange' is set
            if (exchange == null)
                throw new Thinkcode.RabbitMQ.OpenAPI.Client.ApiException(400, "Missing required parameter 'exchange' when calling ExchangesApi->CreateExchange");

            Thinkcode.RabbitMQ.OpenAPI.Client.RequestOptions requestOptions = new Thinkcode.RabbitMQ.OpenAPI.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
            };

            var localVarContentType = Thinkcode.RabbitMQ.OpenAPI.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Thinkcode.RabbitMQ.OpenAPI.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (vhost != null)
                requestOptions.PathParameters.Add("vhost", Thinkcode.RabbitMQ.OpenAPI.Client.ClientUtils.ParameterToString(vhost)); // path parameter
            if (exchange != null)
                requestOptions.PathParameters.Add("exchange", Thinkcode.RabbitMQ.OpenAPI.Client.ClientUtils.ParameterToString(exchange)); // path parameter
            requestOptions.Data = body;

            // authentication (basic_auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Basic " + Thinkcode.RabbitMQ.OpenAPI.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request

            var response = this.Client.Put<Object>("/exchanges/{vhost}/{exchange}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("CreateExchange", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Create Exchange 
        /// </summary>
        /// <exception cref="Thinkcode.RabbitMQ.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vhost"></param>
        /// <param name="exchange"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CreateExchangeAsync (string vhost, string exchange, ExchangeRequest body = null)
        {
             await CreateExchangeAsyncWithHttpInfo(vhost, exchange, body);

        }

        /// <summary>
        /// Create Exchange 
        /// </summary>
        /// <exception cref="Thinkcode.RabbitMQ.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vhost"></param>
        /// <param name="exchange"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Thinkcode.RabbitMQ.OpenAPI.Client.ApiResponse<Object>> CreateExchangeAsyncWithHttpInfo (string vhost, string exchange, ExchangeRequest body = null)
        {
            // verify the required parameter 'vhost' is set
            if (vhost == null)
                throw new Thinkcode.RabbitMQ.OpenAPI.Client.ApiException(400, "Missing required parameter 'vhost' when calling ExchangesApi->CreateExchange");

            // verify the required parameter 'exchange' is set
            if (exchange == null)
                throw new Thinkcode.RabbitMQ.OpenAPI.Client.ApiException(400, "Missing required parameter 'exchange' when calling ExchangesApi->CreateExchange");


            Thinkcode.RabbitMQ.OpenAPI.Client.RequestOptions requestOptions = new Thinkcode.RabbitMQ.OpenAPI.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (vhost != null)
                requestOptions.PathParameters.Add("vhost", Thinkcode.RabbitMQ.OpenAPI.Client.ClientUtils.ParameterToString(vhost)); // path parameter
            if (exchange != null)
                requestOptions.PathParameters.Add("exchange", Thinkcode.RabbitMQ.OpenAPI.Client.ClientUtils.ParameterToString(exchange)); // path parameter
            requestOptions.Data = body;

            // authentication (basic_auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Basic " + Thinkcode.RabbitMQ.OpenAPI.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.PutAsync<Object>("/exchanges/{vhost}/{exchange}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("CreateExchange", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Delete Exchange 
        /// </summary>
        /// <exception cref="Thinkcode.RabbitMQ.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vhost"></param>
        /// <param name="exchange"></param>
        /// <returns></returns>
        public void DeleteExchange (string vhost, string exchange)
        {
             DeleteExchangeWithHttpInfo(vhost, exchange);
        }

        /// <summary>
        /// Delete Exchange 
        /// </summary>
        /// <exception cref="Thinkcode.RabbitMQ.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vhost"></param>
        /// <param name="exchange"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Thinkcode.RabbitMQ.OpenAPI.Client.ApiResponse<Object> DeleteExchangeWithHttpInfo (string vhost, string exchange)
        {
            // verify the required parameter 'vhost' is set
            if (vhost == null)
                throw new Thinkcode.RabbitMQ.OpenAPI.Client.ApiException(400, "Missing required parameter 'vhost' when calling ExchangesApi->DeleteExchange");

            // verify the required parameter 'exchange' is set
            if (exchange == null)
                throw new Thinkcode.RabbitMQ.OpenAPI.Client.ApiException(400, "Missing required parameter 'exchange' when calling ExchangesApi->DeleteExchange");

            Thinkcode.RabbitMQ.OpenAPI.Client.RequestOptions requestOptions = new Thinkcode.RabbitMQ.OpenAPI.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Thinkcode.RabbitMQ.OpenAPI.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Thinkcode.RabbitMQ.OpenAPI.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (vhost != null)
                requestOptions.PathParameters.Add("vhost", Thinkcode.RabbitMQ.OpenAPI.Client.ClientUtils.ParameterToString(vhost)); // path parameter
            if (exchange != null)
                requestOptions.PathParameters.Add("exchange", Thinkcode.RabbitMQ.OpenAPI.Client.ClientUtils.ParameterToString(exchange)); // path parameter

            // authentication (basic_auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Basic " + Thinkcode.RabbitMQ.OpenAPI.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request

            var response = this.Client.Delete<Object>("/exchanges/{vhost}/{exchange}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("DeleteExchange", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Delete Exchange 
        /// </summary>
        /// <exception cref="Thinkcode.RabbitMQ.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vhost"></param>
        /// <param name="exchange"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteExchangeAsync (string vhost, string exchange)
        {
             await DeleteExchangeAsyncWithHttpInfo(vhost, exchange);

        }

        /// <summary>
        /// Delete Exchange 
        /// </summary>
        /// <exception cref="Thinkcode.RabbitMQ.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vhost"></param>
        /// <param name="exchange"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Thinkcode.RabbitMQ.OpenAPI.Client.ApiResponse<Object>> DeleteExchangeAsyncWithHttpInfo (string vhost, string exchange)
        {
            // verify the required parameter 'vhost' is set
            if (vhost == null)
                throw new Thinkcode.RabbitMQ.OpenAPI.Client.ApiException(400, "Missing required parameter 'vhost' when calling ExchangesApi->DeleteExchange");

            // verify the required parameter 'exchange' is set
            if (exchange == null)
                throw new Thinkcode.RabbitMQ.OpenAPI.Client.ApiException(400, "Missing required parameter 'exchange' when calling ExchangesApi->DeleteExchange");


            Thinkcode.RabbitMQ.OpenAPI.Client.RequestOptions requestOptions = new Thinkcode.RabbitMQ.OpenAPI.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (vhost != null)
                requestOptions.PathParameters.Add("vhost", Thinkcode.RabbitMQ.OpenAPI.Client.ClientUtils.ParameterToString(vhost)); // path parameter
            if (exchange != null)
                requestOptions.PathParameters.Add("exchange", Thinkcode.RabbitMQ.OpenAPI.Client.ClientUtils.ParameterToString(exchange)); // path parameter

            // authentication (basic_auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Basic " + Thinkcode.RabbitMQ.OpenAPI.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.DeleteAsync<Object>("/exchanges/{vhost}/{exchange}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("DeleteExchange", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Read Exchange 
        /// </summary>
        /// <exception cref="Thinkcode.RabbitMQ.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vhost"></param>
        /// <param name="exchange"></param>
        /// <returns>Exchange</returns>
        public Exchange GetExchange (string vhost, string exchange)
        {
             Thinkcode.RabbitMQ.OpenAPI.Client.ApiResponse<Exchange> localVarResponse = GetExchangeWithHttpInfo(vhost, exchange);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Read Exchange 
        /// </summary>
        /// <exception cref="Thinkcode.RabbitMQ.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vhost"></param>
        /// <param name="exchange"></param>
        /// <returns>ApiResponse of Exchange</returns>
        public Thinkcode.RabbitMQ.OpenAPI.Client.ApiResponse< Exchange > GetExchangeWithHttpInfo (string vhost, string exchange)
        {
            // verify the required parameter 'vhost' is set
            if (vhost == null)
                throw new Thinkcode.RabbitMQ.OpenAPI.Client.ApiException(400, "Missing required parameter 'vhost' when calling ExchangesApi->GetExchange");

            // verify the required parameter 'exchange' is set
            if (exchange == null)
                throw new Thinkcode.RabbitMQ.OpenAPI.Client.ApiException(400, "Missing required parameter 'exchange' when calling ExchangesApi->GetExchange");

            Thinkcode.RabbitMQ.OpenAPI.Client.RequestOptions requestOptions = new Thinkcode.RabbitMQ.OpenAPI.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Thinkcode.RabbitMQ.OpenAPI.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Thinkcode.RabbitMQ.OpenAPI.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (vhost != null)
                requestOptions.PathParameters.Add("vhost", Thinkcode.RabbitMQ.OpenAPI.Client.ClientUtils.ParameterToString(vhost)); // path parameter
            if (exchange != null)
                requestOptions.PathParameters.Add("exchange", Thinkcode.RabbitMQ.OpenAPI.Client.ClientUtils.ParameterToString(exchange)); // path parameter

            // authentication (basic_auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Basic " + Thinkcode.RabbitMQ.OpenAPI.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request

            var response = this.Client.Get< Exchange >("/exchanges/{vhost}/{exchange}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetExchange", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Read Exchange 
        /// </summary>
        /// <exception cref="Thinkcode.RabbitMQ.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vhost"></param>
        /// <param name="exchange"></param>
        /// <returns>Task of Exchange</returns>
        public async System.Threading.Tasks.Task<Exchange> GetExchangeAsync (string vhost, string exchange)
        {
             Thinkcode.RabbitMQ.OpenAPI.Client.ApiResponse<Exchange> localVarResponse = await GetExchangeAsyncWithHttpInfo(vhost, exchange);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Read Exchange 
        /// </summary>
        /// <exception cref="Thinkcode.RabbitMQ.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vhost"></param>
        /// <param name="exchange"></param>
        /// <returns>Task of ApiResponse (Exchange)</returns>
        public async System.Threading.Tasks.Task<Thinkcode.RabbitMQ.OpenAPI.Client.ApiResponse<Exchange>> GetExchangeAsyncWithHttpInfo (string vhost, string exchange)
        {
            // verify the required parameter 'vhost' is set
            if (vhost == null)
                throw new Thinkcode.RabbitMQ.OpenAPI.Client.ApiException(400, "Missing required parameter 'vhost' when calling ExchangesApi->GetExchange");

            // verify the required parameter 'exchange' is set
            if (exchange == null)
                throw new Thinkcode.RabbitMQ.OpenAPI.Client.ApiException(400, "Missing required parameter 'exchange' when calling ExchangesApi->GetExchange");


            Thinkcode.RabbitMQ.OpenAPI.Client.RequestOptions requestOptions = new Thinkcode.RabbitMQ.OpenAPI.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (vhost != null)
                requestOptions.PathParameters.Add("vhost", Thinkcode.RabbitMQ.OpenAPI.Client.ClientUtils.ParameterToString(vhost)); // path parameter
            if (exchange != null)
                requestOptions.PathParameters.Add("exchange", Thinkcode.RabbitMQ.OpenAPI.Client.ClientUtils.ParameterToString(exchange)); // path parameter

            // authentication (basic_auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Basic " + Thinkcode.RabbitMQ.OpenAPI.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<Exchange>("/exchanges/{vhost}/{exchange}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetExchange", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// List Exchanges 
        /// </summary>
        /// <exception cref="Thinkcode.RabbitMQ.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ICollection&lt;Exchange&gt;</returns>
        public ICollection<Exchange> ListExchanges ()
        {
             Thinkcode.RabbitMQ.OpenAPI.Client.ApiResponse<ICollection<Exchange>> localVarResponse = ListExchangesWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// List Exchanges 
        /// </summary>
        /// <exception cref="Thinkcode.RabbitMQ.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ICollection&lt;Exchange&gt;</returns>
        public Thinkcode.RabbitMQ.OpenAPI.Client.ApiResponse< ICollection<Exchange> > ListExchangesWithHttpInfo ()
        {
            Thinkcode.RabbitMQ.OpenAPI.Client.RequestOptions requestOptions = new Thinkcode.RabbitMQ.OpenAPI.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Thinkcode.RabbitMQ.OpenAPI.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Thinkcode.RabbitMQ.OpenAPI.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (basic_auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Basic " + Thinkcode.RabbitMQ.OpenAPI.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request

            var response = this.Client.Get< ICollection<Exchange> >("/exchanges", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ListExchanges", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// List Exchanges 
        /// </summary>
        /// <exception cref="Thinkcode.RabbitMQ.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ICollection&lt;Exchange&gt;</returns>
        public async System.Threading.Tasks.Task<ICollection<Exchange>> ListExchangesAsync ()
        {
             Thinkcode.RabbitMQ.OpenAPI.Client.ApiResponse<ICollection<Exchange>> localVarResponse = await ListExchangesAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// List Exchanges 
        /// </summary>
        /// <exception cref="Thinkcode.RabbitMQ.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (ICollection&lt;Exchange&gt;)</returns>
        public async System.Threading.Tasks.Task<Thinkcode.RabbitMQ.OpenAPI.Client.ApiResponse<ICollection<Exchange>>> ListExchangesAsyncWithHttpInfo ()
        {

            Thinkcode.RabbitMQ.OpenAPI.Client.RequestOptions requestOptions = new Thinkcode.RabbitMQ.OpenAPI.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            

            // authentication (basic_auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Basic " + Thinkcode.RabbitMQ.OpenAPI.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<ICollection<Exchange>>("/exchanges", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ListExchanges", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// List Exchanges for VHost 
        /// </summary>
        /// <exception cref="Thinkcode.RabbitMQ.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vhost"></param>
        /// <returns>ICollection&lt;Exchange&gt;</returns>
        public ICollection<Exchange> ListExchangesForHost (string vhost)
        {
             Thinkcode.RabbitMQ.OpenAPI.Client.ApiResponse<ICollection<Exchange>> localVarResponse = ListExchangesForHostWithHttpInfo(vhost);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List Exchanges for VHost 
        /// </summary>
        /// <exception cref="Thinkcode.RabbitMQ.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vhost"></param>
        /// <returns>ApiResponse of ICollection&lt;Exchange&gt;</returns>
        public Thinkcode.RabbitMQ.OpenAPI.Client.ApiResponse< ICollection<Exchange> > ListExchangesForHostWithHttpInfo (string vhost)
        {
            // verify the required parameter 'vhost' is set
            if (vhost == null)
                throw new Thinkcode.RabbitMQ.OpenAPI.Client.ApiException(400, "Missing required parameter 'vhost' when calling ExchangesApi->ListExchangesForHost");

            Thinkcode.RabbitMQ.OpenAPI.Client.RequestOptions requestOptions = new Thinkcode.RabbitMQ.OpenAPI.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Thinkcode.RabbitMQ.OpenAPI.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Thinkcode.RabbitMQ.OpenAPI.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (vhost != null)
                requestOptions.PathParameters.Add("vhost", Thinkcode.RabbitMQ.OpenAPI.Client.ClientUtils.ParameterToString(vhost)); // path parameter

            // authentication (basic_auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Basic " + Thinkcode.RabbitMQ.OpenAPI.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request

            var response = this.Client.Get< ICollection<Exchange> >("/exchanges/{vhost}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ListExchangesForHost", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// List Exchanges for VHost 
        /// </summary>
        /// <exception cref="Thinkcode.RabbitMQ.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vhost"></param>
        /// <returns>Task of ICollection&lt;Exchange&gt;</returns>
        public async System.Threading.Tasks.Task<ICollection<Exchange>> ListExchangesForHostAsync (string vhost)
        {
             Thinkcode.RabbitMQ.OpenAPI.Client.ApiResponse<ICollection<Exchange>> localVarResponse = await ListExchangesForHostAsyncWithHttpInfo(vhost);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List Exchanges for VHost 
        /// </summary>
        /// <exception cref="Thinkcode.RabbitMQ.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vhost"></param>
        /// <returns>Task of ApiResponse (ICollection&lt;Exchange&gt;)</returns>
        public async System.Threading.Tasks.Task<Thinkcode.RabbitMQ.OpenAPI.Client.ApiResponse<ICollection<Exchange>>> ListExchangesForHostAsyncWithHttpInfo (string vhost)
        {
            // verify the required parameter 'vhost' is set
            if (vhost == null)
                throw new Thinkcode.RabbitMQ.OpenAPI.Client.ApiException(400, "Missing required parameter 'vhost' when calling ExchangesApi->ListExchangesForHost");


            Thinkcode.RabbitMQ.OpenAPI.Client.RequestOptions requestOptions = new Thinkcode.RabbitMQ.OpenAPI.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (vhost != null)
                requestOptions.PathParameters.Add("vhost", Thinkcode.RabbitMQ.OpenAPI.Client.ClientUtils.ParameterToString(vhost)); // path parameter

            // authentication (basic_auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Basic " + Thinkcode.RabbitMQ.OpenAPI.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<ICollection<Exchange>>("/exchanges/{vhost}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ListExchangesForHost", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Publish Message 
        /// </summary>
        /// <exception cref="Thinkcode.RabbitMQ.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vhost"></param>
        /// <param name="exchange"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>PublishResponse</returns>
        public PublishResponse PublishMessage (string vhost, string exchange, PublishRequest body = null)
        {
             Thinkcode.RabbitMQ.OpenAPI.Client.ApiResponse<PublishResponse> localVarResponse = PublishMessageWithHttpInfo(vhost, exchange, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Publish Message 
        /// </summary>
        /// <exception cref="Thinkcode.RabbitMQ.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vhost"></param>
        /// <param name="exchange"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of PublishResponse</returns>
        public Thinkcode.RabbitMQ.OpenAPI.Client.ApiResponse< PublishResponse > PublishMessageWithHttpInfo (string vhost, string exchange, PublishRequest body = null)
        {
            // verify the required parameter 'vhost' is set
            if (vhost == null)
                throw new Thinkcode.RabbitMQ.OpenAPI.Client.ApiException(400, "Missing required parameter 'vhost' when calling ExchangesApi->PublishMessage");

            // verify the required parameter 'exchange' is set
            if (exchange == null)
                throw new Thinkcode.RabbitMQ.OpenAPI.Client.ApiException(400, "Missing required parameter 'exchange' when calling ExchangesApi->PublishMessage");

            Thinkcode.RabbitMQ.OpenAPI.Client.RequestOptions requestOptions = new Thinkcode.RabbitMQ.OpenAPI.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Thinkcode.RabbitMQ.OpenAPI.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Thinkcode.RabbitMQ.OpenAPI.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (vhost != null)
                requestOptions.PathParameters.Add("vhost", Thinkcode.RabbitMQ.OpenAPI.Client.ClientUtils.ParameterToString(vhost)); // path parameter
            if (exchange != null)
                requestOptions.PathParameters.Add("exchange", Thinkcode.RabbitMQ.OpenAPI.Client.ClientUtils.ParameterToString(exchange)); // path parameter
            requestOptions.Data = body;

            // authentication (basic_auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Basic " + Thinkcode.RabbitMQ.OpenAPI.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request

            var response = this.Client.Post< PublishResponse >("/exchanges/{vhost}/{exchange}/publish", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("PublishMessage", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Publish Message 
        /// </summary>
        /// <exception cref="Thinkcode.RabbitMQ.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vhost"></param>
        /// <param name="exchange"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of PublishResponse</returns>
        public async System.Threading.Tasks.Task<PublishResponse> PublishMessageAsync (string vhost, string exchange, PublishRequest body = null)
        {
             Thinkcode.RabbitMQ.OpenAPI.Client.ApiResponse<PublishResponse> localVarResponse = await PublishMessageAsyncWithHttpInfo(vhost, exchange, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Publish Message 
        /// </summary>
        /// <exception cref="Thinkcode.RabbitMQ.OpenAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vhost"></param>
        /// <param name="exchange"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (PublishResponse)</returns>
        public async System.Threading.Tasks.Task<Thinkcode.RabbitMQ.OpenAPI.Client.ApiResponse<PublishResponse>> PublishMessageAsyncWithHttpInfo (string vhost, string exchange, PublishRequest body = null)
        {
            // verify the required parameter 'vhost' is set
            if (vhost == null)
                throw new Thinkcode.RabbitMQ.OpenAPI.Client.ApiException(400, "Missing required parameter 'vhost' when calling ExchangesApi->PublishMessage");

            // verify the required parameter 'exchange' is set
            if (exchange == null)
                throw new Thinkcode.RabbitMQ.OpenAPI.Client.ApiException(400, "Missing required parameter 'exchange' when calling ExchangesApi->PublishMessage");


            Thinkcode.RabbitMQ.OpenAPI.Client.RequestOptions requestOptions = new Thinkcode.RabbitMQ.OpenAPI.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (vhost != null)
                requestOptions.PathParameters.Add("vhost", Thinkcode.RabbitMQ.OpenAPI.Client.ClientUtils.ParameterToString(vhost)); // path parameter
            if (exchange != null)
                requestOptions.PathParameters.Add("exchange", Thinkcode.RabbitMQ.OpenAPI.Client.ClientUtils.ParameterToString(exchange)); // path parameter
            requestOptions.Data = body;

            // authentication (basic_auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Basic " + Thinkcode.RabbitMQ.OpenAPI.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.PostAsync<PublishResponse>("/exchanges/{vhost}/{exchange}/publish", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("PublishMessage", response);
                if (exception != null) throw exception;
            }

            return response;
        }

    }
}
