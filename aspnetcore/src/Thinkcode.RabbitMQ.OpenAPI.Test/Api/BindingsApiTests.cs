/* 
 * Rabbitmq Http API
 *
 * This is the OpenAPI specification of the RabbitMQ HTTP API. For more information, please refer to [HTTP API](https://cdn.rawgit.com/rabbitmq/rabbitmq-management/v3.7.14/priv/www/api/index.html) official documentation.
 *
 * OpenAPI spec version: 1.0
 * Contact: carlos@adaptive.me
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using Thinkcode.RabbitMQ.OpenAPI.Client;
using Thinkcode.RabbitMQ.OpenAPI.Api;
using Thinkcode.RabbitMQ.OpenAPI.Model;

namespace Thinkcode.RabbitMQ.OpenAPI.Test
{
    /// <summary>
    ///  Class for testing BindingsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class BindingsApiTests : IDisposable
    {
        private BindingsApi instance;

        public BindingsApiTests()
        {
            instance = new BindingsApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of BindingsApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' BindingsApi
            //Assert.IsType(typeof(BindingsApi), instance, "instance is a BindingsApi");
        }

        
        /// <summary>
        /// Test CreateBindingsForQueueExchange
        /// </summary>
        [Fact]
        public void CreateBindingsForQueueExchangeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string vhost = null;
            //string exchange = null;
            //string queue = null;
            //BindingRequest body = null;
            //instance.CreateBindingsForQueueExchange(vhost, exchange, queue, body);
            
        }
        
        /// <summary>
        /// Test DeleteBindingForQueueExchange
        /// </summary>
        [Fact]
        public void DeleteBindingForQueueExchangeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string vhost = null;
            //string exchange = null;
            //string queue = null;
            //string propertyKey = null;
            //instance.DeleteBindingForQueueExchange(vhost, exchange, queue, propertyKey);
            
        }
        
        /// <summary>
        /// Test GetBindingForQueueExchange
        /// </summary>
        [Fact]
        public void GetBindingForQueueExchangeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string vhost = null;
            //string exchange = null;
            //string queue = null;
            //string propertyKey = null;
            //var response = instance.GetBindingForQueueExchange(vhost, exchange, queue, propertyKey);
            //Assert.IsType<Binding> (response, "response is Binding");
        }
        
        /// <summary>
        /// Test ListBindings
        /// </summary>
        [Fact]
        public void ListBindingsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.ListBindings();
            //Assert.IsType<ICollection<Binding>> (response, "response is ICollection<Binding>");
        }
        
        /// <summary>
        /// Test ListBindingsAsDestination
        /// </summary>
        [Fact]
        public void ListBindingsAsDestinationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string vhost = null;
            //string exchange = null;
            //var response = instance.ListBindingsAsDestination(vhost, exchange);
            //Assert.IsType<ICollection<Binding>> (response, "response is ICollection<Binding>");
        }
        
        /// <summary>
        /// Test ListBindingsAsSource
        /// </summary>
        [Fact]
        public void ListBindingsAsSourceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string vhost = null;
            //string exchange = null;
            //var response = instance.ListBindingsAsSource(vhost, exchange);
            //Assert.IsType<ICollection<Binding>> (response, "response is ICollection<Binding>");
        }
        
        /// <summary>
        /// Test ListBindingsForQueue
        /// </summary>
        [Fact]
        public void ListBindingsForQueueTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string vhost = null;
            //string queue = null;
            //var response = instance.ListBindingsForQueue(vhost, queue);
            //Assert.IsType<ICollection<Binding>> (response, "response is ICollection<Binding>");
        }
        
        /// <summary>
        /// Test ListBindingsForQueueExchange
        /// </summary>
        [Fact]
        public void ListBindingsForQueueExchangeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string vhost = null;
            //string exchange = null;
            //string queue = null;
            //var response = instance.ListBindingsForQueueExchange(vhost, exchange, queue);
            //Assert.IsType<ICollection<Binding>> (response, "response is ICollection<Binding>");
        }
        
    }

}
