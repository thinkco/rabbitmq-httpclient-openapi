/* 
 * Rabbitmq Http API
 *
 * This is the OpenAPI specification of the RabbitMQ HTTP API. For more information, please refer to [HTTP API](https://cdn.rawgit.com/rabbitmq/rabbitmq-management/v3.7.14/priv/www/api/index.html) official documentation.
 *
 * OpenAPI spec version: 1.0
 * Contact: carlos@adaptive.me
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Thinkcode.RabbitMQ.OpenAPI.Client.OpenAPIDateConverter;

namespace Thinkcode.RabbitMQ.OpenAPI.Model
{
    /// <summary>
    /// ConsumeRequest
    /// </summary>
    [DataContract]
    public partial class ConsumeRequest :  IEquatable<ConsumeRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ConsumeRequest" /> class.
        /// </summary>
        /// <param name="count">count.</param>
        /// <param name="ackmode">ackmode.</param>
        /// <param name="encoding">encoding.</param>
        /// <param name="truncate">truncate.</param>
        public ConsumeRequest(int count = default(int), string ackmode = default(string), string encoding = default(string), int truncate = default(int))
        {
            this.Count = count;
            this.Ackmode = ackmode;
            this.Encoding = encoding;
            this.Truncate = truncate;
        }
        
        /// <summary>
        /// Gets or Sets Count
        /// </summary>
        [DataMember(Name="count", EmitDefaultValue=false)]
        public int Count { get; set; }

        /// <summary>
        /// Gets or Sets Ackmode
        /// </summary>
        [DataMember(Name="ackmode", EmitDefaultValue=false)]
        public string Ackmode { get; set; }

        /// <summary>
        /// Gets or Sets Encoding
        /// </summary>
        [DataMember(Name="encoding", EmitDefaultValue=false)]
        public string Encoding { get; set; }

        /// <summary>
        /// Gets or Sets Truncate
        /// </summary>
        [DataMember(Name="truncate", EmitDefaultValue=false)]
        public int Truncate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ConsumeRequest {\n");
            sb.Append("  Count: ").Append(Count).Append("\n");
            sb.Append("  Ackmode: ").Append(Ackmode).Append("\n");
            sb.Append("  Encoding: ").Append(Encoding).Append("\n");
            sb.Append("  Truncate: ").Append(Truncate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ConsumeRequest);
        }

        /// <summary>
        /// Returns true if ConsumeRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of ConsumeRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ConsumeRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Count == input.Count ||
                    (this.Count != null &&
                    this.Count.Equals(input.Count))
                ) && 
                (
                    this.Ackmode == input.Ackmode ||
                    (this.Ackmode != null &&
                    this.Ackmode.Equals(input.Ackmode))
                ) && 
                (
                    this.Encoding == input.Encoding ||
                    (this.Encoding != null &&
                    this.Encoding.Equals(input.Encoding))
                ) && 
                (
                    this.Truncate == input.Truncate ||
                    (this.Truncate != null &&
                    this.Truncate.Equals(input.Truncate))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Count != null)
                    hashCode = hashCode * 59 + this.Count.GetHashCode();
                if (this.Ackmode != null)
                    hashCode = hashCode * 59 + this.Ackmode.GetHashCode();
                if (this.Encoding != null)
                    hashCode = hashCode * 59 + this.Encoding.GetHashCode();
                if (this.Truncate != null)
                    hashCode = hashCode * 59 + this.Truncate.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
