/* 
 * Rabbitmq Http API
 *
 * This is the OpenAPI specification of the RabbitMQ HTTP API. For more information, please refer to [HTTP API](https://cdn.rawgit.com/rabbitmq/rabbitmq-management/v3.7.14/priv/www/api/index.html) official documentation.
 *
 * OpenAPI spec version: 1.0
 * Contact: carlos@adaptive.me
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Thinkcode.RabbitMQ.OpenAPI.Client.OpenAPIDateConverter;

namespace Thinkcode.RabbitMQ.OpenAPI.Model
{
    /// <summary>
    /// Overview
    /// </summary>
    [DataContract]
    public partial class Overview :  IEquatable<Overview>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Overview" /> class.
        /// </summary>
        /// <param name="churnRates">churnRates.</param>
        /// <param name="clusterName">clusterName.</param>
        /// <param name="contexts">contexts.</param>
        /// <param name="erlangFullVersion">erlangFullVersion.</param>
        /// <param name="erlangVersion">erlangVersion.</param>
        /// <param name="exchangeTypes">exchangeTypes.</param>
        /// <param name="listeners">listeners.</param>
        /// <param name="managementVersion">managementVersion.</param>
        /// <param name="messageStats">messageStats.</param>
        /// <param name="node">node.</param>
        /// <param name="objectTotals">objectTotals.</param>
        /// <param name="queueTotals">queueTotals.</param>
        /// <param name="rabbitmqVersion">rabbitmqVersion.</param>
        /// <param name="ratesMode">ratesMode.</param>
        /// <param name="sampleRetentionPolicies">sampleRetentionPolicies.</param>
        /// <param name="statisticsDbEventQueue">statisticsDbEventQueue.</param>
        public Overview(OverviewChurnRates churnRates = default(OverviewChurnRates), string clusterName = default(string), Collection<OverviewContexts> contexts = default(Collection<OverviewContexts>), string erlangFullVersion = default(string), string erlangVersion = default(string), Collection<OverviewExchangeTypes> exchangeTypes = default(Collection<OverviewExchangeTypes>), Collection<OverviewListeners> listeners = default(Collection<OverviewListeners>), string managementVersion = default(string), OverviewMessageStats messageStats = default(OverviewMessageStats), string node = default(string), OverviewObjectTotals objectTotals = default(OverviewObjectTotals), OverviewQueueTotals queueTotals = default(OverviewQueueTotals), string rabbitmqVersion = default(string), string ratesMode = default(string), OverviewSampleRetentionPolicies sampleRetentionPolicies = default(OverviewSampleRetentionPolicies), int statisticsDbEventQueue = default(int))
        {
            this.ChurnRates = churnRates;
            this.ClusterName = clusterName;
            this.Contexts = contexts;
            this.ErlangFullVersion = erlangFullVersion;
            this.ErlangVersion = erlangVersion;
            this.ExchangeTypes = exchangeTypes;
            this.Listeners = listeners;
            this.ManagementVersion = managementVersion;
            this.MessageStats = messageStats;
            this.Node = node;
            this.ObjectTotals = objectTotals;
            this.QueueTotals = queueTotals;
            this.RabbitmqVersion = rabbitmqVersion;
            this.RatesMode = ratesMode;
            this.SampleRetentionPolicies = sampleRetentionPolicies;
            this.StatisticsDbEventQueue = statisticsDbEventQueue;
        }
        
        /// <summary>
        /// Gets or Sets ChurnRates
        /// </summary>
        [DataMember(Name="churn_rates", EmitDefaultValue=false)]
        public OverviewChurnRates ChurnRates { get; set; }

        /// <summary>
        /// Gets or Sets ClusterName
        /// </summary>
        [DataMember(Name="cluster_name", EmitDefaultValue=false)]
        public string ClusterName { get; set; }

        /// <summary>
        /// Gets or Sets Contexts
        /// </summary>
        [DataMember(Name="contexts", EmitDefaultValue=false)]
        public Collection<OverviewContexts> Contexts { get; set; }

        /// <summary>
        /// Gets or Sets ErlangFullVersion
        /// </summary>
        [DataMember(Name="erlang_full_version", EmitDefaultValue=false)]
        public string ErlangFullVersion { get; set; }

        /// <summary>
        /// Gets or Sets ErlangVersion
        /// </summary>
        [DataMember(Name="erlang_version", EmitDefaultValue=false)]
        public string ErlangVersion { get; set; }

        /// <summary>
        /// Gets or Sets ExchangeTypes
        /// </summary>
        [DataMember(Name="exchange_types", EmitDefaultValue=false)]
        public Collection<OverviewExchangeTypes> ExchangeTypes { get; set; }

        /// <summary>
        /// Gets or Sets Listeners
        /// </summary>
        [DataMember(Name="listeners", EmitDefaultValue=false)]
        public Collection<OverviewListeners> Listeners { get; set; }

        /// <summary>
        /// Gets or Sets ManagementVersion
        /// </summary>
        [DataMember(Name="management_version", EmitDefaultValue=false)]
        public string ManagementVersion { get; set; }

        /// <summary>
        /// Gets or Sets MessageStats
        /// </summary>
        [DataMember(Name="message_stats", EmitDefaultValue=false)]
        public OverviewMessageStats MessageStats { get; set; }

        /// <summary>
        /// Gets or Sets Node
        /// </summary>
        [DataMember(Name="node", EmitDefaultValue=false)]
        public string Node { get; set; }

        /// <summary>
        /// Gets or Sets ObjectTotals
        /// </summary>
        [DataMember(Name="object_totals", EmitDefaultValue=false)]
        public OverviewObjectTotals ObjectTotals { get; set; }

        /// <summary>
        /// Gets or Sets QueueTotals
        /// </summary>
        [DataMember(Name="queue_totals", EmitDefaultValue=false)]
        public OverviewQueueTotals QueueTotals { get; set; }

        /// <summary>
        /// Gets or Sets RabbitmqVersion
        /// </summary>
        [DataMember(Name="rabbitmq_version", EmitDefaultValue=false)]
        public string RabbitmqVersion { get; set; }

        /// <summary>
        /// Gets or Sets RatesMode
        /// </summary>
        [DataMember(Name="rates_mode", EmitDefaultValue=false)]
        public string RatesMode { get; set; }

        /// <summary>
        /// Gets or Sets SampleRetentionPolicies
        /// </summary>
        [DataMember(Name="sample_retention_policies", EmitDefaultValue=false)]
        public OverviewSampleRetentionPolicies SampleRetentionPolicies { get; set; }

        /// <summary>
        /// Gets or Sets StatisticsDbEventQueue
        /// </summary>
        [DataMember(Name="statistics_db_event_queue", EmitDefaultValue=false)]
        public int StatisticsDbEventQueue { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Overview {\n");
            sb.Append("  ChurnRates: ").Append(ChurnRates).Append("\n");
            sb.Append("  ClusterName: ").Append(ClusterName).Append("\n");
            sb.Append("  Contexts: ").Append(Contexts).Append("\n");
            sb.Append("  ErlangFullVersion: ").Append(ErlangFullVersion).Append("\n");
            sb.Append("  ErlangVersion: ").Append(ErlangVersion).Append("\n");
            sb.Append("  ExchangeTypes: ").Append(ExchangeTypes).Append("\n");
            sb.Append("  Listeners: ").Append(Listeners).Append("\n");
            sb.Append("  ManagementVersion: ").Append(ManagementVersion).Append("\n");
            sb.Append("  MessageStats: ").Append(MessageStats).Append("\n");
            sb.Append("  Node: ").Append(Node).Append("\n");
            sb.Append("  ObjectTotals: ").Append(ObjectTotals).Append("\n");
            sb.Append("  QueueTotals: ").Append(QueueTotals).Append("\n");
            sb.Append("  RabbitmqVersion: ").Append(RabbitmqVersion).Append("\n");
            sb.Append("  RatesMode: ").Append(RatesMode).Append("\n");
            sb.Append("  SampleRetentionPolicies: ").Append(SampleRetentionPolicies).Append("\n");
            sb.Append("  StatisticsDbEventQueue: ").Append(StatisticsDbEventQueue).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Overview);
        }

        /// <summary>
        /// Returns true if Overview instances are equal
        /// </summary>
        /// <param name="input">Instance of Overview to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Overview input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ChurnRates == input.ChurnRates ||
                    (this.ChurnRates != null &&
                    this.ChurnRates.Equals(input.ChurnRates))
                ) && 
                (
                    this.ClusterName == input.ClusterName ||
                    (this.ClusterName != null &&
                    this.ClusterName.Equals(input.ClusterName))
                ) && 
                (
                    this.Contexts == input.Contexts ||
                    this.Contexts != null &&
                    this.Contexts.SequenceEqual(input.Contexts)
                ) && 
                (
                    this.ErlangFullVersion == input.ErlangFullVersion ||
                    (this.ErlangFullVersion != null &&
                    this.ErlangFullVersion.Equals(input.ErlangFullVersion))
                ) && 
                (
                    this.ErlangVersion == input.ErlangVersion ||
                    (this.ErlangVersion != null &&
                    this.ErlangVersion.Equals(input.ErlangVersion))
                ) && 
                (
                    this.ExchangeTypes == input.ExchangeTypes ||
                    this.ExchangeTypes != null &&
                    this.ExchangeTypes.SequenceEqual(input.ExchangeTypes)
                ) && 
                (
                    this.Listeners == input.Listeners ||
                    this.Listeners != null &&
                    this.Listeners.SequenceEqual(input.Listeners)
                ) && 
                (
                    this.ManagementVersion == input.ManagementVersion ||
                    (this.ManagementVersion != null &&
                    this.ManagementVersion.Equals(input.ManagementVersion))
                ) && 
                (
                    this.MessageStats == input.MessageStats ||
                    (this.MessageStats != null &&
                    this.MessageStats.Equals(input.MessageStats))
                ) && 
                (
                    this.Node == input.Node ||
                    (this.Node != null &&
                    this.Node.Equals(input.Node))
                ) && 
                (
                    this.ObjectTotals == input.ObjectTotals ||
                    (this.ObjectTotals != null &&
                    this.ObjectTotals.Equals(input.ObjectTotals))
                ) && 
                (
                    this.QueueTotals == input.QueueTotals ||
                    (this.QueueTotals != null &&
                    this.QueueTotals.Equals(input.QueueTotals))
                ) && 
                (
                    this.RabbitmqVersion == input.RabbitmqVersion ||
                    (this.RabbitmqVersion != null &&
                    this.RabbitmqVersion.Equals(input.RabbitmqVersion))
                ) && 
                (
                    this.RatesMode == input.RatesMode ||
                    (this.RatesMode != null &&
                    this.RatesMode.Equals(input.RatesMode))
                ) && 
                (
                    this.SampleRetentionPolicies == input.SampleRetentionPolicies ||
                    (this.SampleRetentionPolicies != null &&
                    this.SampleRetentionPolicies.Equals(input.SampleRetentionPolicies))
                ) && 
                (
                    this.StatisticsDbEventQueue == input.StatisticsDbEventQueue ||
                    (this.StatisticsDbEventQueue != null &&
                    this.StatisticsDbEventQueue.Equals(input.StatisticsDbEventQueue))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ChurnRates != null)
                    hashCode = hashCode * 59 + this.ChurnRates.GetHashCode();
                if (this.ClusterName != null)
                    hashCode = hashCode * 59 + this.ClusterName.GetHashCode();
                if (this.Contexts != null)
                    hashCode = hashCode * 59 + this.Contexts.GetHashCode();
                if (this.ErlangFullVersion != null)
                    hashCode = hashCode * 59 + this.ErlangFullVersion.GetHashCode();
                if (this.ErlangVersion != null)
                    hashCode = hashCode * 59 + this.ErlangVersion.GetHashCode();
                if (this.ExchangeTypes != null)
                    hashCode = hashCode * 59 + this.ExchangeTypes.GetHashCode();
                if (this.Listeners != null)
                    hashCode = hashCode * 59 + this.Listeners.GetHashCode();
                if (this.ManagementVersion != null)
                    hashCode = hashCode * 59 + this.ManagementVersion.GetHashCode();
                if (this.MessageStats != null)
                    hashCode = hashCode * 59 + this.MessageStats.GetHashCode();
                if (this.Node != null)
                    hashCode = hashCode * 59 + this.Node.GetHashCode();
                if (this.ObjectTotals != null)
                    hashCode = hashCode * 59 + this.ObjectTotals.GetHashCode();
                if (this.QueueTotals != null)
                    hashCode = hashCode * 59 + this.QueueTotals.GetHashCode();
                if (this.RabbitmqVersion != null)
                    hashCode = hashCode * 59 + this.RabbitmqVersion.GetHashCode();
                if (this.RatesMode != null)
                    hashCode = hashCode * 59 + this.RatesMode.GetHashCode();
                if (this.SampleRetentionPolicies != null)
                    hashCode = hashCode * 59 + this.SampleRetentionPolicies.GetHashCode();
                if (this.StatisticsDbEventQueue != null)
                    hashCode = hashCode * 59 + this.StatisticsDbEventQueue.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
