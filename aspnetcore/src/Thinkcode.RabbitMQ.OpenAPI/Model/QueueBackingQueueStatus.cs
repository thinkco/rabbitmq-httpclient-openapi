/* 
 * Rabbitmq Http API
 *
 * This is the OpenAPI specification of the RabbitMQ HTTP API. For more information, please refer to [HTTP API](https://cdn.rawgit.com/rabbitmq/rabbitmq-management/v3.7.14/priv/www/api/index.html) official documentation.
 *
 * OpenAPI spec version: 1.0
 * Contact: carlos@adaptive.me
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Thinkcode.RabbitMQ.OpenAPI.Client.OpenAPIDateConverter;

namespace Thinkcode.RabbitMQ.OpenAPI.Model
{
    /// <summary>
    /// QueueBackingQueueStatus
    /// </summary>
    [DataContract]
    public partial class QueueBackingQueueStatus :  IEquatable<QueueBackingQueueStatus>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="QueueBackingQueueStatus" /> class.
        /// </summary>
        /// <param name="q1">q1.</param>
        /// <param name="q2">q2.</param>
        /// <param name="q3">q3.</param>
        /// <param name="q4">q4.</param>
        /// <param name="targetRamCount">targetRamCount.</param>
        /// <param name="delta">delta.</param>
        /// <param name="nextSeqId">nextSeqId.</param>
        /// <param name="avgIngressRate">avgIngressRate.</param>
        /// <param name="avgAckIngressRate">avgAckIngressRate.</param>
        /// <param name="avgEgressRate">avgEgressRate.</param>
        /// <param name="mode">mode.</param>
        /// <param name="len">len.</param>
        /// <param name="avgAckEgressRate">avgAckEgressRate.</param>
        public QueueBackingQueueStatus(int q1 = default(int), int q2 = default(int), int q3 = default(int), int q4 = default(int), string targetRamCount = default(string), Collection<string> delta = default(Collection<string>), int nextSeqId = default(int), decimal avgIngressRate = default(decimal), decimal avgAckIngressRate = default(decimal), decimal avgEgressRate = default(decimal), string mode = default(string), int len = default(int), int avgAckEgressRate = default(int))
        {
            this.Q1 = q1;
            this.Q2 = q2;
            this.Q3 = q3;
            this.Q4 = q4;
            this.TargetRamCount = targetRamCount;
            this.Delta = delta;
            this.NextSeqId = nextSeqId;
            this.AvgIngressRate = avgIngressRate;
            this.AvgAckIngressRate = avgAckIngressRate;
            this.AvgEgressRate = avgEgressRate;
            this.Mode = mode;
            this.Len = len;
            this.AvgAckEgressRate = avgAckEgressRate;
        }
        
        /// <summary>
        /// Gets or Sets Q1
        /// </summary>
        [DataMember(Name="q1", EmitDefaultValue=false)]
        public int Q1 { get; set; }

        /// <summary>
        /// Gets or Sets Q2
        /// </summary>
        [DataMember(Name="q2", EmitDefaultValue=false)]
        public int Q2 { get; set; }

        /// <summary>
        /// Gets or Sets Q3
        /// </summary>
        [DataMember(Name="q3", EmitDefaultValue=false)]
        public int Q3 { get; set; }

        /// <summary>
        /// Gets or Sets Q4
        /// </summary>
        [DataMember(Name="q4", EmitDefaultValue=false)]
        public int Q4 { get; set; }

        /// <summary>
        /// Gets or Sets TargetRamCount
        /// </summary>
        [DataMember(Name="target_ram_count", EmitDefaultValue=false)]
        public string TargetRamCount { get; set; }

        /// <summary>
        /// Gets or Sets Delta
        /// </summary>
        [DataMember(Name="delta", EmitDefaultValue=false)]
        public Collection<string> Delta { get; set; }

        /// <summary>
        /// Gets or Sets NextSeqId
        /// </summary>
        [DataMember(Name="next_seq_id", EmitDefaultValue=false)]
        public int NextSeqId { get; set; }

        /// <summary>
        /// Gets or Sets AvgIngressRate
        /// </summary>
        [DataMember(Name="avg_ingress_rate", EmitDefaultValue=false)]
        public decimal AvgIngressRate { get; set; }

        /// <summary>
        /// Gets or Sets AvgAckIngressRate
        /// </summary>
        [DataMember(Name="avg_ack_ingress_rate", EmitDefaultValue=false)]
        public decimal AvgAckIngressRate { get; set; }

        /// <summary>
        /// Gets or Sets AvgEgressRate
        /// </summary>
        [DataMember(Name="avg_egress_rate", EmitDefaultValue=false)]
        public decimal AvgEgressRate { get; set; }

        /// <summary>
        /// Gets or Sets Mode
        /// </summary>
        [DataMember(Name="mode", EmitDefaultValue=false)]
        public string Mode { get; set; }

        /// <summary>
        /// Gets or Sets Len
        /// </summary>
        [DataMember(Name="len", EmitDefaultValue=false)]
        public int Len { get; set; }

        /// <summary>
        /// Gets or Sets AvgAckEgressRate
        /// </summary>
        [DataMember(Name="avg_ack_egress_rate", EmitDefaultValue=false)]
        public int AvgAckEgressRate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class QueueBackingQueueStatus {\n");
            sb.Append("  Q1: ").Append(Q1).Append("\n");
            sb.Append("  Q2: ").Append(Q2).Append("\n");
            sb.Append("  Q3: ").Append(Q3).Append("\n");
            sb.Append("  Q4: ").Append(Q4).Append("\n");
            sb.Append("  TargetRamCount: ").Append(TargetRamCount).Append("\n");
            sb.Append("  Delta: ").Append(Delta).Append("\n");
            sb.Append("  NextSeqId: ").Append(NextSeqId).Append("\n");
            sb.Append("  AvgIngressRate: ").Append(AvgIngressRate).Append("\n");
            sb.Append("  AvgAckIngressRate: ").Append(AvgAckIngressRate).Append("\n");
            sb.Append("  AvgEgressRate: ").Append(AvgEgressRate).Append("\n");
            sb.Append("  Mode: ").Append(Mode).Append("\n");
            sb.Append("  Len: ").Append(Len).Append("\n");
            sb.Append("  AvgAckEgressRate: ").Append(AvgAckEgressRate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as QueueBackingQueueStatus);
        }

        /// <summary>
        /// Returns true if QueueBackingQueueStatus instances are equal
        /// </summary>
        /// <param name="input">Instance of QueueBackingQueueStatus to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(QueueBackingQueueStatus input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Q1 == input.Q1 ||
                    (this.Q1 != null &&
                    this.Q1.Equals(input.Q1))
                ) && 
                (
                    this.Q2 == input.Q2 ||
                    (this.Q2 != null &&
                    this.Q2.Equals(input.Q2))
                ) && 
                (
                    this.Q3 == input.Q3 ||
                    (this.Q3 != null &&
                    this.Q3.Equals(input.Q3))
                ) && 
                (
                    this.Q4 == input.Q4 ||
                    (this.Q4 != null &&
                    this.Q4.Equals(input.Q4))
                ) && 
                (
                    this.TargetRamCount == input.TargetRamCount ||
                    (this.TargetRamCount != null &&
                    this.TargetRamCount.Equals(input.TargetRamCount))
                ) && 
                (
                    this.Delta == input.Delta ||
                    this.Delta != null &&
                    this.Delta.SequenceEqual(input.Delta)
                ) && 
                (
                    this.NextSeqId == input.NextSeqId ||
                    (this.NextSeqId != null &&
                    this.NextSeqId.Equals(input.NextSeqId))
                ) && 
                (
                    this.AvgIngressRate == input.AvgIngressRate ||
                    (this.AvgIngressRate != null &&
                    this.AvgIngressRate.Equals(input.AvgIngressRate))
                ) && 
                (
                    this.AvgAckIngressRate == input.AvgAckIngressRate ||
                    (this.AvgAckIngressRate != null &&
                    this.AvgAckIngressRate.Equals(input.AvgAckIngressRate))
                ) && 
                (
                    this.AvgEgressRate == input.AvgEgressRate ||
                    (this.AvgEgressRate != null &&
                    this.AvgEgressRate.Equals(input.AvgEgressRate))
                ) && 
                (
                    this.Mode == input.Mode ||
                    (this.Mode != null &&
                    this.Mode.Equals(input.Mode))
                ) && 
                (
                    this.Len == input.Len ||
                    (this.Len != null &&
                    this.Len.Equals(input.Len))
                ) && 
                (
                    this.AvgAckEgressRate == input.AvgAckEgressRate ||
                    (this.AvgAckEgressRate != null &&
                    this.AvgAckEgressRate.Equals(input.AvgAckEgressRate))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Q1 != null)
                    hashCode = hashCode * 59 + this.Q1.GetHashCode();
                if (this.Q2 != null)
                    hashCode = hashCode * 59 + this.Q2.GetHashCode();
                if (this.Q3 != null)
                    hashCode = hashCode * 59 + this.Q3.GetHashCode();
                if (this.Q4 != null)
                    hashCode = hashCode * 59 + this.Q4.GetHashCode();
                if (this.TargetRamCount != null)
                    hashCode = hashCode * 59 + this.TargetRamCount.GetHashCode();
                if (this.Delta != null)
                    hashCode = hashCode * 59 + this.Delta.GetHashCode();
                if (this.NextSeqId != null)
                    hashCode = hashCode * 59 + this.NextSeqId.GetHashCode();
                if (this.AvgIngressRate != null)
                    hashCode = hashCode * 59 + this.AvgIngressRate.GetHashCode();
                if (this.AvgAckIngressRate != null)
                    hashCode = hashCode * 59 + this.AvgAckIngressRate.GetHashCode();
                if (this.AvgEgressRate != null)
                    hashCode = hashCode * 59 + this.AvgEgressRate.GetHashCode();
                if (this.Mode != null)
                    hashCode = hashCode * 59 + this.Mode.GetHashCode();
                if (this.Len != null)
                    hashCode = hashCode * 59 + this.Len.GetHashCode();
                if (this.AvgAckEgressRate != null)
                    hashCode = hashCode * 59 + this.AvgAckEgressRate.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
